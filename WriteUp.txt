# 567 LAB9
# LANGUAGE: gug / Paraguayan Guaraní
# AUTHOR: Thor Wicke Monteverde
# PARTNER: Lisa Tittle Caballero


1. Include your iso.txt file with your translations of the MMT sentences.

We included a gug.txt file in our gug grammar folder. Additionally we created a separate tsdb suite that included all MMT sentences in IGT format.

We also added the English and Chadian Arabic grammars we changed and used in this lab. They are placed inside our gug folder file in their respective eng and shu folders. 

2. Describe any clean up you did to your grammar.

-- Changes in semi.vpm
As noted in feedback from lab8 and office hours, the values for SPECI, TENSE and MOOD are not relevant for PG. therefore they were commented out in the semi.vpm file.

-- Changes in globals.lsp - max edge number
We had to work this week with some string realizations that used several thousand edges for their calculation. We increased as the default max-edge-number to 10000, in the globals.lsp file under the lkb folder.

-- Changes in lexicon.tdl 
We added following entries to the lexicon in order to generate the necessary MMT strings.
For the English adjective 'hungry' we have two entries, one as a stative intransitive verb and one as an attributive adjective. 


vareHa := stative-intrans-verb-lex &
  [ STEM < "vareHa" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hungry_a_rel" ].

vareHa_2 := attributive-adj-lex &
  [ STEM < "vareHa" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hungry_a_rel" ].    

mbarakaja := com-anim-noun-lex &
  [ STEM < "mbarakaja" >,
    SYNSEM.LKEYS.KEYREL.PRED "_cat_n_rel" ].

mbaHyru := com-inam-noun-lex &
  [ STEM < "mbaHyru" >,
    SYNSEM.LKEYS.KEYREL.PRED "_car_n_rel" ].

yvyraty := com-inam-noun-lex &
  [ STEM < "yvyraty" >,
    SYNSEM.LKEYS.KEYREL.PRED "_park_n_rel" ].

munNa := trans-verb-lex &
  [ STEM < "munNa" >,
    SYNSEM.LKEYS.KEYREL.PRED "_chase_v_rel" ].

karu := dynamic-intrans-verb-lex &
  [ STEM < "karu" >,
    SYNSEM.LKEYS.KEYREL.PRED "_eat_v_rel" ].

imoHaA := decl-cl-verb-lex &
   [STEM<"imoHaA">,
    SYNSEM.LKEYS.KEYREL.PRED "_think_v_rel"].

One interesting anecdote here about working with sources it that the online dictionary we use only gave us the stative-intransitive verb version, which made us wonder how to realize an MMT sentence ('The hungry dog eats'). But it seemed strange to us that ‘hungry’ would act so differently from all other adjectives in Guarani, and further research helped us find that hungry DOES exist as an attributive adjective in Guaraní.  It seems that we weren’t getting it from our on-line dictionary, because it only has options to translate into Guaraní from Spanish and German, both languages which say “I have hunger” instead of “I am hungry”! 


-- Sentential coordination rules

——SF & Coordination
We added additional constraints around to our coordination with respect to both SLASH and SF.  We updated our decl-cl rules so that they now specify that they are [SF prop] instead of [SF prop-or-ques] as we had originally designated them. 

decl-cl := head-only-int-decl-clause & declarative-clause & 
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < >,
         VAL #val & [ SPEC  < >,
          SUBJ < >, 
          COMPS < >, 
          SPR < > ], 
         ScM #scope,
         MC bool, 
         IC -, 
         EC #ec],
         CONT.HOOK.INDEX.SF prop ],
       NON-LOCAL [SLASH #sl, YNQ 0-dlist ] ],
    HEAD-DTR.SYNSEM [ LOCAL.CAT [ ScM #scope, 
          MC na, 
          VAL #val, 
          HEAD verb, 
          EC #ec, IC -],
          NON-LOCAL [ SLASH #sl, 
          YNQ 0-dlist,
          QUE <! !> ]]].

We then added constraints specifying that our coordination phrases identify the rule's #sf value with that of its daughter/s. For top-or-mid cases we also constrain both daughters share a SF value.  This significantly cut down on edges.

;;Inherited by all sentential coordination phrases
s-coord-phrase :+
  [ SYNSEM [ NON-LOCAL #nl,
       LOCAL [ CONT.HOOK.INDEX.SF #sf,
         CAT [ MC na, EC #ec, IC #ic ] ] ],
    LCOORD-DTR.SYNSEM [ NON-LOCAL #nl & [SLASH 0-dlist],
      LOCAL [ CONT.HOOK.INDEX.SF #sf,
        CAT [ ScM -, MC +, EC #ec,  IC #ic] ] ],
    RCOORD-DTR.SYNSEM [ NON-LOCAL #nl & [SLASH 0-dlist],
      LOCAL [ CONT.HOOK.INDEX.SF #sf,
        CAT [ ScM -, MC bool, EC #ec,  IC #ic] ] ] ].
        
s-bottom-coord-phrase :+
  [ SYNSEM [ NON-LOCAL #nl,
       LOCAL [ CONT.HOOK.INDEX.SF #sf,
                   CAT [ MC bool, EC #ec, IC #ic ] ] ],
    NONCONJ-DTR.SYNSEM [ NON-LOCAL #nl & [ SLASH 0-dlist], 
       LOCAL [ CONT.HOOK.INDEX.SF #sf,
         CAT [ ScM -, MC bool, EC #ec, IC #ic ] ] ] ].

——SLASH  & Coordination

We also added an additional constraint after a Thursday class suggestion requiring the daughters of our coordination rules to have an empty SLASH value, which also cut down on edges. This is present now in the s-coord-phrase and s-bottom-coord-phrase rules above.

--- Removal of Mid-Coord
One of our major works this week was looking at coordination rules. We began to realize that because Guarani has asyndenton sentential coordination, the mid-coord rule for our Strategy 2 coordination (with ha) was effectively redundant. We could get the same semantics with asyndenton coordination of T-coordinated phrases. 

s2-mid-coord-rule := basic-s-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL [ COORD-STRAT "2",
       CAT[ EC #ec, IC #ic]], 
     RCOORD-DTR.SYNSEM.LOCAL.CAT [ EC #ec, IC #ic],
     LCOORD-DTR.SYNSEM.LOCAL.CAT [ EC #ec, IC #ic] ].

With the permission of the instructor, we have opted NOT to implement mid-coordination for sentences in our grammar.  We fixed this by commenting out the rule in rules.tdl:

;s2-mid-coord := s2-mid-coord-rule.

This allowed us to loose some spurious ambiguity and to reduce the edges used in parsing  by over 1000 for sentences that use s2 coordination like:

"jagua omunNa mbaHyru pe ha mbarakaja omunNa jagua pe"
         Dogs chase cars and cats chase dogs

-- NP Coordination rules
We realized that in some of the string realizations, in which two nouns were combined in coordination, the attaching verb predicate was showing up with subject markers corresponding to PERNUM 1pl-incl, 1pl-excl, 2pl, 3per. This overgeneration was due to an underspecification in the PERNUM value of the NP top node of NP coordinated structures. Languages like PG require PERNUM to be fully specified to get the correct markers on the verb.  After consultation with the instructor, we implemented a temporary fix, which does not represent a final solution, but let us go over the requirements of this week's lab. We made this adjustment in the NP top coordination rule.

np2-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL [ COORD-STRAT "2",
       CAT[ EC #ec, IC #ic],
                   CONT.HOOK.INDEX.PNG.PERNUM #pernum ],
     RCOORD-DTR.SYNSEM.LOCAL[ CAT [ EC #ec, IC #ic],
                              CONT.HOOK.INDEX.PNG.PERNUM #pernum],
     LCOORD-DTR.SYNSEM.LOCAL.CAT [ EC #ec, IC #ic] ].

The rule identifies the PERNUM value of the parent node, with one of the daughter's PERNUM value. Since this feature is being currently worked out by another graduate student, we are sure that their solution will be more elegant, but we were satisfied with our temporary fix for the current lab.


-- VP coordination rule
One of the sentences this week required the use of out verb coordination rule, which showed us some ways it was underspecified. In order to avoid unnecessary edges and make it its behavior uniform with our other rules, we constrained the way rules generated by vp-coordination unify with the root, by including an [MC na] constraint on the vp2-top-coord-rule.

 vp2-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL [CAT.MC na, 
       COORD-STRAT "2" ] ].


-- Changes to be+located raising verb
Playing with translation this week also showed us that our semantics for sentences like  #10 and #164  were broken. 

#Ex.10: be+located raising verb. PP argument and PP modifier.
Source: author
Vetted: f
Judgment: g
Phenomena: adp
jagua oime avatitýapyteApe ju'indi
jagua oime avatityA apyteApe juHi ndi
jagua o-ime avatityA=apyteApe juHi=ndi
dog A.3-be+located cornfield=in juHi=with
'The dog is located in the cornfield with the frog'

#Ex.164: be+located raising verb. Contentful postpositions.  
Source: b
Vetted: f
Judgment: g
Phenomena: {cop, adp}
Oime kotýmbyteApe jaguandi
oime koty mbyteApe jagua ndi
o-ime koty=mbyteApe jagua=ndi
3.ACT-be.located room=inside dog=with
'He/She is located inside the room with the dog'

Through a conversation on goPost we discovered that the problem was that our contentful-adps were not identifying their ARG1 with their XARG. Also our instructor pointed out that since our raising verb identifies the XARG of the complement with the subject's index if that XARG does not point to anything it breaks the chain of identities.  We added the link as shown below:

contentful-adp-lex := basic-int-mod-adposition-lex & norm-zero-arg &
  [ SYNSEM.LOCAL [ CONT [HOOK.XARG #arg,
       RELS <![arg1 #arg]!> ],
       CAT [ EC - , 
             IC - ,
        HEAD adp & 
           [ CASE loc,
             MOD <[ LOCAL.CAT [HEAD verb,
             VAL [ COMPS < >, 
                   SUBJ cons ] ] ] > ],
        VAL [ SPR < >,
        COMPS < #comps >,
        SPEC < >, 
        SUBJ < > ] ] ],
    ARG-ST < #comps & [ OPT -,
                        LOCAL.CAT [ HEAD +np & [CASE nom],
            VAL [SPR < >] ] ] > ].

This fixed the MRS on our end and, which, together with implementation of the transfer rule for be+located (described in a later section), allowed us to get the appropriate translations from sentences like "The dogs are in the park." 

—— Additional changes to contentful-adp-lex 
Further testing after the change described above showed us that our PP predicates when attaching as modifiers were attaching too high and that we needed to constrain our contentful-adp-lex to only modify verby things that are [SUBJ cons] but [COMPS < >]. We experimented with the sentence "juHi ohecha jagua ndi" - "the frog saw something with the dog" / "something saw the frog with the dog" to make sure we still got both of those parses with this new constraint.  Fortunately we do, so we felt comfortable implementing those changes (repeated here for ease of reading:

contentful-adp-lex := basic-int-mod-adposition-lex & norm-zero-arg &
  [ SYNSEM.LOCAL [ CONT [HOOK.XARG #arg,
       RELS <![arg1 #arg]!> ],
       CAT [ EC - , 
             IC - ,
        HEAD adp & 
           [ CASE loc,
             MOD <[ LOCAL.CAT [HEAD verb,
             VAL [ COMPS < >, 
                   SUBJ cons ] ] ] > ],
        VAL [ SPR < >,
        COMPS < #comps >,
        SPEC < >, 
        SUBJ < > ] ] ],
    ARG-ST < #comps & [ OPT -,
                        LOCAL.CAT [ HEAD +np & [CASE nom],
            VAL [SPR < >] ] ] > ].

As mentioned in an earlier lab, we could easily modify our contentful adp's to allow them to also modify nouny constituents by changing their MOD constraint from [HEAD verb] to [HEAD +nv]. But, as you brought up in your feedback, we aren't sure that this is motivated for Guarani, so we have left the constraint as is.

-- Changes to Question-Clitic MOD
As pointed by our instructor, our question-clitics had MOD values that were not constrained enough, so we added a [LOCAL.CAT.HEAD +nv] constraint to the MOD value, so that it doesn't try to apply to elements that aren’t nouny or verby.

question-clitic-lex := no-hcons-lex-item &
 [ SYNSEM [ LOCAL [ CAT [ IC +, 
                          VAL [ SPR < >, 
        			COMPS < >, 
        			SUBJ < >, 
        			SPEC < >],
                          HEAD adj & [ MOD < [ LOCAL [intersective-mod & [CAT.HEAD +nv]],
                                               LIGHT +,
                                               L-PERIPH +] > ]],
        	    CONT.RELS <! !> ],
            NON-LOCAL[ 	REL <! !>,
           		SLASH <! !>,
                       	QUE <! !>,
                       	YNQ <! *top* !>  ]]].


-- Comp-head Rule and EC/IC feature
We adjusted the transmission of the EC/IC values through the comp-head-phrase rule so that they are passed up from the HEAD-DTR instead of the NON-HEAD-DTR.  Many of the string realizations we saw when we did MMT this week had word orders that we had not experimented with before. Initially because of our second-position constraints we had been concerned with only getting these values 'from the left,’ which lead to some bad strings and the realization that we needed our comp-head-phrase rule to actually get those values from its head daughter. So the new comp-head rule looks as follows: 

  comp-head-phrase := basic-head-1st-comp-phrase & head-final-head-nexus & 
   [ SYNSEM.LOCAL.CAT [ EC #ec,
            IC #ic ], 
    HEAD-DTR.SYNSEM.LOCAL.CAT [EC #ec,
            IC #ic ]].

-- Undefined EC/IC feature values in determiners
We were getting some strings realized this week, because our the EC/IC values were undefined in determiners and a wrongly defined head-spec-phrase rule was pushing those undefined bools into unification with the requirements for embedded clauses. This resulted in clauses that were (incorrectly) specified as either [EC +] or [IC +] even though the required clitics (complementizer or question) were missing.

We fixed this by ensuring that that the head-spec-phrase rule copies those values from is nouny head daughter, which was already specified as [EC -, IC -]—-all nouns, and verbs other than decl-cl-verb-lex and int-cl-verbl-lex have those default values.

  head-spec-phrase := basic-head-spec-phrase & head-final & 
    [ SYNSEM.LOCAL.CAT [ EC #ec,
                         IC #ic], 
     HEAD-DTR.SYNSEM.LOCAL.CAT [ EC #ec,
                                IC #ic ],
      NON-HEAD-DTR.SYNSEM.OPT - ].

Additionally, we added the negative default values to our determiners, as shown below:

  determiner-lex := basic-determiner-lex & norm-zero-arg & 
                    non-mod-lex-item & norm-sem-lex-item &
    [ SYNSEM.LOCAL.CAT[ EC -,
                        IC -,
                        VAL [ SPR < >,
                             COMPS < >,
                               SUBJ < >,
           SPEC<[LOCAL.CONT.HOOK.INDEX.COG-ST uniq+fam+act]>]]].


-- Changes to int-cl-verb-lex and decl-cl-verb-lex
We observed through MMT this week that our clausal verbs were not requiring their subjects to be nominative, resulting in some incorrect string realizations when we translated from English. Therefore we added the case restriction to the subject of these verb types. Additionally we eliminated some spurious parses by added an [MC +] constraint to the first (only) element on their COMPS so that they only accept a clause that has passed through the int-cl or decl-cl respectively.  So we had these final entries for these verb lexemes:

int-cl-verb-lex:= cl-verb-lex &
  [ SYNSEM.LOCAL.CAT [  IC - , 
           		VAL [   SUBJ < [LOCAL.CAT.HEAD noun & [CASE nom]]>,
           			SPR < >,
           		COMPS < [ LOCAL [ CAT [ MC +,
                 				IC +,
                 				HEAD verb,
                 				VAL [ COMPS < >, 
                 				      SUBJ < > ] ],
                 			  CONT.HOOK.INDEX.SF ques ]]>]]].

decl-cl-verb-lex:= cl-verb-lex &
  [ SYNSEM [ LOCAL.CAT [ EC -,
       			 IC -,
       			 VAL [ 	SUBJ  < [LOCAL.CAT.HEAD noun & [CASE nom]]>,
             		 	SPR < > ,
             			COMPS < [ LOCAL [ CAT [ MC +,
                   					EC +,
                   					IC -,
                   					HEAD verb,
                   					VAL.COMPS < > ],
             				       CONT.HOOK.INDEX.SF prop-or-ques ]]>]]]].


-- Changes to Scopal Modifier

Even though the focus of the week was MT, we also did a lot of work to try to reduce edges in our coordinated phrases, both to improve the performance of our grammar and to make it easier to debug what we needed to. Our scopal modifier is derived from our conjuction "ha" and they are homographs, so when we were testing parsing sentences with the conjuction "ha" we were getting some interference from the scopal modifier, which led us to finally decide to constrain its behavior further.

#Sentence.20
Source: a, attested
Vetted: t
Judgment: g
Phenomena: corpus
Ha he'i Huanchi:
ha  oeHi   Juanchi
ha  o-eHi  Juanchi
and A.3-say Juan.DIM
'And Juanito says:'

There are three parses that we want for #20. The two which reflect subject/object ambiguity, and one where "ha" attaches to the coordinated phrase that means something like "Someone says something at it is Juanchi."  We were initially getting an additional phrase where “ha” was attaching low to the S “oeHi” and then being coordinated with the predicate Juanchi. This high/low attachment ambiguity only created one additional parse here but with longer sentences the problem grew quickly.  

Following a suggestion in office hours we decided to fix this by implementing a new cat feature:

; Features for scopal-mod (reducing overgeneration)
cat :+ [ScM bool].

The definition for scopal-modifiers is given below. From last week it already constrains them to modify only elements that are [HEAD verb] and [MC +], which in our grammar identifies only int-cl and decl-cl.  Because of this constraint only our int-cl and decl-cl phrase rules, our coordination rules, and our scopal mod-rule needed to specify values for ScM to get the result we wanted. 

; Scopal-modifiers
scopal-lex := scopal-mod-lex & norm-sem-lex-item & norm-zero-arg & 
        non-ynq-word &
  [ SYNSEM.LOCAL.CAT [  HEAD adv & [ MOD  < [ LOCAL.CAT [ HEAD verb,
                MC + ] ] > ],
                        EC -, 
                        IC -,
                        VAL [ SPR < >,
                              COMPS < >,
                              SUBJ < >,
                              SPEC < > ]]].


Our gug-scopal-mod-phrase now specifies that it adds the value [ScM +].  In principle we could constrain this further if we needed to in the future, but in our current grammar this is enough because scopal-modifiers are the only elements defined as adverbs in our grammar and our rule already constrains its daughter to be [HEAD adv].

gug-scopal-mod-phrase := basic-head-mod-phrase-simple & head-final & 
       head-compositional &
  [ SYNSEM [ LOCAL.CAT [ ScM +,
      			 MC na,                       
       			 EC -,                        
       			 IC -],
       	     NON-LOCAL [ QUE <! !>, 
       			 SLASH <! !>, 
       			 YNQ <! !> ]],
    HEAD-DTR.SYNSEM.LOCAL.CAT [ MC +,
                                IC -,
                                EC -,
                                HEAD verb & [ MOD < > ],
                                VAL [ SPEC < >, 
                                      SPR < >, 
                                      SUBJ < >, 
                                      COMPS < > ]],
    NON-HEAD-DTR.SYNSEM.LOCAL [ CAT [ HEAD adv & 
             				 [ MOD < [ LOCAL scopal-mod ] >],
                                      VAL [SPR < >, 
             				   SUBJ < >, 
             				   COMPS < > ]],
                                CONT.HOOK #hook ],
    C-CONT [ HOOK #hook,
       	     HCONS <! !>,
       	     ICONS <! !> ] ].


Our int-cl and decl-cl rules now pass up ScM information, identifying their ScM value with their head (only) daughter's ScM value.  One bonus feature of implementing this change is that we finally (after looking so many times and not seeing!) noticed that both types had some unconstrained MOD values, so we made sure to constrain that, which also helped. We made sure to test the changes separately to confirm that BOTH changes made a difference.

Finally we made sure to specify that our sentential coordination rules require their daughters to be ScM -, so they cannot coordinate decl or int clauses to which a scopal modifier has already attached. 

;;Inherited by all sentential coordination phrases
s-coord-phrase :+
  [ SYNSEM [ NON-LOCAL #nl,
       LOCAL.CAT [ MC na, EC #ec, IC #ic ] ],
    LCOORD-DTR.SYNSEM [ NON-LOCAL #nl,
      LOCAL [ CONT.HOOK.INDEX.SF #sf,
        CAT [ ScM -, MC +, EC #ec,  IC #ic] ] ],
    RCOORD-DTR.SYNSEM [ NON-LOCAL #nl,
      LOCAL [ CONT.HOOK.INDEX.SF #sf,
        CAT [ ScM -, MC bool, EC #ec,  IC #ic] ] ] ].
        

s-bottom-coord-phrase :+
  [ SYNSEM [ NON-LOCAL #nl,
       LOCAL [ CONT.HOOK.INDEX.SF #sf,
                   CAT [ MC bool, EC #ec, IC #ic ] ] ],
    NONCONJ-DTR.SYNSEM [ NON-LOCAL #nl & [ SLASH 0-dlist], 
       LOCAL [ CONT.HOOK.INDEX.SF #sf,
         CAT [ ScM -, MC bool, EC #ec, IC #ic ] ] ] ].

Payoff:  Now #20 has only the three parses that we want and we reduced a lot of the noise when we were debugging sentences with ha in them

#Sentence.20
Source: a, attested
Vetted: t
Judgment: g
Phenomena: corpus
Ha he'i Huanchi:
ha  oeHi   Juanchi
ha  o-eHi  Juanchi
and A.3-say Juan.DIM
'And Juanito says:'

Finally in order for this to have any pay off we made sure to specify that our sentential coordination rules require their daughters to be ScM -, so they cannot coordinate decl or int clauses to which a scopal modifier has already attached. 

;;Inherited by all sentential coordination phrases
s-coord-phrase :+
  [ SYNSEM [ NON-LOCAL #nl,
       LOCAL.CAT [ MC na, EC #ec, IC #ic ] ],
    LCOORD-DTR.SYNSEM [ NON-LOCAL #nl,
      LOCAL [ CONT.HOOK.INDEX.SF #sf,
        CAT [ ScM -, MC +, EC #ec,  IC #ic] ] ],
    RCOORD-DTR.SYNSEM [ NON-LOCAL #nl,
      LOCAL [ CONT.HOOK.INDEX.SF #sf,
        CAT [ ScM -, MC bool, EC #ec,  IC #ic] ] ] ].
        

s-bottom-coord-phrase :+
  [ SYNSEM [ NON-LOCAL #nl,
       LOCAL [ CONT.HOOK.INDEX.SF #sf,
                   CAT [ MC bool, EC #ec, IC #ic ] ] ],
    NONCONJ-DTR.SYNSEM [ NON-LOCAL #nl & [ SLASH 0-dlist], 
       LOCAL [ CONT.HOOK.INDEX.SF #sf,
         CAT [ ScM -, MC bool, EC #ec, IC #ic ] ] ] ].

Payoff:  Now #20 has only the three parses that we want and we reduced a lot of the noise when we were debugging sentences with ha in them

#Sentence.20
Source: a, attested
Vetted: t
Judgment: g
Phenomena: corpus
Ha he'i Huanchi:
ha  oeHi   Juanchi
ha  o-eHi  Juanchi
and A.3-say Juan.DIM
'And Juanito says:'


3. Describe the transfer rules you instantiated, and why.

PG has pronouns, but they are generally dropped when context and/or the use of cross-referential markers on the predicates make their overt use obvious. Therefore it is important that, compared to a language like English, the pronoun could be dropped in a translation eng2gug. In the file named acm.mtr , available in each of the grammars for English and Chadian Arabic we instantiated the rule:

  pro-drop:= pronoun-delete-mtr

This rule refers to following entry in the acm.tdl file:

  pronoun-delete-mtr := monotonic_omtr &
    [ INPUT [ RELS <! [ PRED "pron_rel",
                        ARG0 #x,
                        LBL #larg ],
                      [ PRED "exist_q_rel",
                        ARG0 #x,
                        RSTR #harg ] !>,
              HCONS <! qeq & [ LARG #larg,
              HARG #harg ] !> ],
       OUTPUT [ RELS <! !>,
                HCONS <! !> ]].

This rules says that an input that contains a predicate pronoun in the RELS list (together with is q relationship and its qeq value in the HCONS list), is deleted in the output RELS and HCONS lists. As the super-type monotic_omtr suggests, this is an optional rule, therefore applied optionally to transfer rules, so that pronouns can be produced on some realized strings and not in other. 

4. Describe any further transfer rules you needed to develop, and why.

For the purpose of the translation of some of the MMT sentences in this week's lab, we added three additional transfer rules. 

-- Transitive predicae 'eat' with unspecified dropped argument
The sentence #4 ("Dogs eat") uses in English and Chadian Arabic a transitive verb 'eat', that attaches a [COG-ST type-id] to its dropped argument. PG has a different interpretation. If an argument is dropped in a transitive verb, it is generally assumed to be relevant in the situation context where the uterance is used. Therefore it is [COG-ST in-foc]. Therefore the transitive verb in PG is not the optimal for such a translation. As PG has also an intransitive verb for eat, which has a different form, we assume that its function is similar to the transitive verb in English/Chadian Arabic with dropped complement. Therefore we decide to implement a transfer rule that link the predication of a transitive verb 'eat' in the input, with the predication of an intransitve 'eat' in the output. We implemented the following transfer rule in acm.tdl in the English and Chadian Arabic grammars:

  eat-intrans-mtr := monotonic_mtr &
  [ INPUT [ RELS <! [ PRED "_eat_v_rel",
          LBL #lbl,
          ARG0 #arg0,
          ARG1 #arg1,
          ARG2 #arg2 & [ COG-ST type-id ] ] !> ],
    FILTER [ RELS <! [ ARG0 #arg2 ] !> ],
    OUTPUT [ RELS <! [ PRED "_eat_v_rel",
           LBL #lbl,
           ARG0 #arg0,
           ARG1 #arg1 ] !> ]].

This transfer rule changes the predication of a transitive verb 'eat', therefore with three arguments, where the complement has the feature value [COG-ST type-id], into the predication of an intranstiv verb for 'eat' with only two arguments (the index value of the predication and the subject). This transfer rule is not optional.
This rule was implemented in acm.mtr with the following entry:

  eat-intrans := eat-intrans-mtr

-- Locative verb with prepositional predicate
In sentences like MMT # 16 ('The dogs are in the park'), English uses a copula verb with no semantic content to attach a PP predicate to its subject argument. Chadian Arabic seems to attach directly the subject argument to the PP predicate. PG has a different strategy. As explained in a previous lab, PG uses a raising verb that introduces a predicate '_be+located', which has a contentful PP predicate as its complement argument. Therefore we need a transfer rule, that in the case of languages that use semantically empty 'verb' or not verb at all, together with the PP predication, would introduce the 'be+located' predication needed in PG. We implemented therefore following rule in the acm.tdl file of English and Chadian Arabic grammars:

  locative-mtr := monotonic_mtr &
  [ INPUT [ RELS <! [ PRED "_in_p_rel",
          LBL #lbl,
          ARG0 #arg0,
          ARG1 #arg1,
          ARG2 #arg2 ] !>,
      HCONS <! !> ],
    FILTER [ RELS <! [ PRED "_be+located_v_rel" ] !> ],
    OUTPUT [ RELS <! [ PRED "_in_p_rel",
           LBL #larg,
           ARG1 #arg1,
           ARG2 #arg2 ],
       [ PRED "_be+located_v_rel",
         LBL #lbl,
         ARG0 #arg0,
         ARG1 #arg1,
         ARG2 #harg ] !>,
       HCONS <! [ HARG #harg,
            LARG #larg ] !> ] ].   

This transfer rule is not optional. This included following entry in the file acm.mtr of both the English and Chadian Arabic grammars:

  locative := locative-mtr.


-- Adverb 'quickly' to adjective 'quick'
In PG, adverbs and adjectives work functionally the same with no difference in their form. Therefore, as explained in a previous lab, we implemented both as one class of words, as adjectives.
When dealing with other languages that make the distinction of adverbs and adjectives, we need to change the predication, if the form has a relevant difference. This is the case in MMT sentence #14, which uses the adverb quickly, which has a predication '_quickly_a_rel' in the English and Chadian Arabic sentence. The corresponding entry in PG is '_quick_a_rel', so we needed a transfer rule, that transforms the PRED value. We implemented in acm.tdl of English and Chadian Arabic:

  quick-mtr := monotonic_mtr &
  [ INPUT [ RELS <! [ PRED "_quickly_a_rel",
         LBL #lbl,
         ARG0 #arg0,
         ARG1 #arg1 ] !> ],
    OUTPUT [ RELS <! [ PRED "_quick_a_rel",
         LBL #lbl,
         ARG0 #arg0,
         ARG1 #arg1] !>]]. 
The input takes a RELS element with [PRED "_quickly_a_rel"] and produces in the output [PRED "_quick_a_rel"], without changes the rest of the elements entry. This transfer rule is not optional. This was then implemented in the acm.mtr file of both English and Chadian Arabic grammars:

  quick := quick-mtr.


5. Document your current coverage on translating the MMT sentences from English and Chadian Arabic into your language. If you are generating more than one output for each input, explain the sources of variation.

". . . combinatorics, a sort of glorified dice-throwing . . ." Roberb Kanigel

The choices we have made for PG based on the reference grammars available to us make our grammar relatively generous for the realization of different strings, even when based on a single semantic interpretation, as represented through the MRS. The main factors that contribute to this flexibility are the free word order, the optionality of overt predicate arguments, the optionality of certain adpositions like accusative markers, question/complementizer clitics or even the optional use of the sentential conjunction clitic. We will see how some of these factors worked independently or together to realize multiple strings in our translations.

We were able to generate strings in PG for all of the presented English and Chadian Arabic sentences. In all of our generated strings, we have more than one realization, so we explain in detail how the numbers come up.

We introduce each sentence with the English (eng), Chadian Arabic (shu) and a representative PG sentence (gug), as well a description of the realized strings in an English to PG (eng2gug) and a Chadian Arabic to PG (shu2gug) translation.


MMT sentence # 1
eng: dogs sleep
shu: kalib-PL y-unuum-u 
gug: jagua oike
     dogs   A3.sleep
EXPLANATION:
This sentence is translated satisfactorily in eng2gug and shu2gug. In both translations, there are each 2 strings realized, which correspond to the two word orders of the constituents (VP NP and NP VP), as PG is a free word-order language.

MMT sentence # 2
eng: dogs chase cars
shu: kalib-PL y-itaarid-u watiir-PL
gug: jagua omunNa    mbaHyru pe
     dogs   A3.chase cars    acc
EXPLANATION:
The translation into gug from both eng and shu generates each 12 different string sentences. 
Each of these 12 string groups is generated through these factors:
There are three 3 constituents (NP V NP), which can appear in 6 different orders.
The 'car' object argument can optionally have the accusative =pe clitic.
Therefore the one transfer output generate 12 possible parses (6*2) (each for eng2gug/shu2gug)

MMT sentence # 3
eng: I chase you 
shu: ana n-itaarid-0-k
gug: romunNa
     A1sg.O2sg.chase
EXPLANATION:
The translation into PG worked differently depending on the start language. English has an ambiguity in the NUM value of the pronoun 'you', which can be singular or plural. Chadian Arabic on the other side had just a 'singular you' in its sentence. This distinction generates different strings for eng2gug and shu2gug.
In the case of eng, we obtained 38 translation realizations. We have four transfer outputs applying depending on the optionality of pronoun drop, with results 2+4+8+24 = 38 strings.
2 strings were the individual verb predicates with portmanteau clitics and without overt pronouns were realized, with marker ro- for 1sg subject/2sg object, or marker po- for 1sg subject/2pl object. 
4 additional realized strings with the subject pronoun ('che', 1sg pronoun), present in two different positions for each of the two differently marked predicates.
8 additional realized strings, if the object pronouns ('ndeve', 2sg pronoun, or 'pendeve', 2pl pronoun) are allowed. Here a new predicate is allowed by the subsumption rules, AMUNNA (for 'I chase'). We discuss in section 5 the possible reason why it doesn't not show in the previous transfer outputs. The predicate AMUNNA ('I chase') has no restriction on the object therefore it combines with both singular and plural pronouns. The predicates with portmanteau markers though can combine only with the respective pronouns. So ro- (1sg subject/2sg object) can only combine with the 2sg pronoun, and po- (1sg subject/2sg object) only with the 2pl pronoun. These four pronoun-predicate combination in two different word orders, allows then for 8 realized strings.
24 additional realized strings, when both subject and object pronouns are overt. With three constituents we have 6 possible word orders, which given the 4 possible predicate/pronoun combinations, allows for 24 strings.
In the case of shu2gug, the Chadian Arabic used only a 'you' pronoun with [NUM sg] value, although only marked in the verb. There are only two transfer outputs applying with a total of 3 realizations (1+ 2), because there is no overt object pronoun in the original sentence.
1 realization for a predicate without overt pronouns. This is the verb predicate with the portmanteau marker ro- for subject 1sg and object 2sg. 
2 realizations with the overt pronoun 'I'. The two realizations are just the demonstrations of free word order of NP and VP.

MMT sentence # 4
eng: dogs eat
shu: kalib-PL y-aakul-u
gug: jagua okaru
     dogs  A3.eat
EXPLANATION:
Both eng2gug and shu2gug generated each 2 sentence strings in PG. They correspond to the 2 words in free word order.

MMT sentence # 5
eng: the dogs chase cars
shu: al-kalib-PL y-itaarid-u watiir-PL
gug: lo     jagua omunNa   mbaHyru pe
     DET.pl dogs  A3.chase cars    acc
EXPLANATION:
Both eng2gug and shu2gug generate each a set of 24 realized strings in PG. 
The 3 constituents have 6 possible word orders. Additionally, the definite article ('the dogs') is optional, therefore 2 possibilities. Then, the accussative adposition clitic =pe is optional, therefore 2 possibilities.
That makes for 24 realized strings (6 * 2 * 2).

MMT sentence # 6
eng: the dogs don't chase cars
shu: al-kalib-PL ma y-itaarid-u watiir-PL
gug: lo     jagua ndomunNai         mbaHyru pe
     DET.pl dogs  neg.A3.chase.neg  cars    acc
EXPLANATION:
Both eng2gug and shu2gug generate each a set of 24 realized strings in PG. This is parallel the same as in sentence #5, because the negation happens as adpositions attached to the predicates, therefore the predicate remains a unit.
Similarily, 3 constituents have 6 possible word orders, the definite article ('the dogs') is optional, therefore 2 possibilities. Then, the accussative adposition clitic =pe is optional, therefore 2 possibilities. That is a total of 24 realized strings (6*2*2).

MMT sentence # 7
eng: I think that you know that dogs chase cars 
shu: ana n-ahsib-0 kadar inta t-a'arif-0 kadar kalib-PL y-itaarid-u watiir-PL 
gug: aimoHaA     reikuua    ha    omunNa ha      jagua mbaHyru pe
     A1sg.think  A2sg.know  COMPL A3.chase COMPL dogs  cars    acc
EXPLANATION:
There are different numbers of realized strings for eng2gug and shu2gug due to the difference of number of the 'you' pronoun, which in English is ambiguous between singular and plural, while only being singular in the Chadian Arabic sentence.
For eng2gug we have four different transfer outputs applying depending on the number of overt pronouns (16+32+48+96 = 192 realizations):
16 realized strings for sentence without overt pronouns. 2 times for the singular/plural 'you', 2 times for the optional accusative clitic =pe, 2 times for the free word order of the most internal embedded sentence, and 2 times for the word order of the outside embedding main clause. Therefore 2*2*2*2 = 16 realizations.
32 realized strings if we add only the overt pronouns for 'you', singular and plural. Because that adds 2 times the word order for the middle embedded clause, that doubles the previous count of 16 to 32 realizations.
48 realized strings, if we add only the overt pronoun for 'I' in the main clause sentence. 3 constituents in the main clause allow for 6 word order. Additionally 2 times for the optional accussative clitic =pe, 2 times for 'you' singular and plural, and 2 times for the word order of the internal embedded clause. Therefore 6*2*2*2=48 strings.
96 realized strings when all overt pronouns are allowed. This is the same as the previous 48 realized strings time 2 for the free word order of the middle embedded sentence between the pronoun 'you' and its VP. 
For shu2gug, the number of realized strings is just the half of what is shown for eng2gug, because Chadian Arabic uses just the singular 'you', which is interpreted not only in the pronoun used in Guarani, but also in the marker of the middle embedding predicate verb.
Therefore we have here in equivalent form 8 + 16 + 24 + 48 = 96 realized strings.

MMT sentence # 8
eng: I ask whether you know that dogs chase cars
shu: ana n-as'al-0 kan inta t-a'arif-0 kadar kalib-PL y-itaarid-u watiir-PL
gug: aporandu reikuua   pa omunNa   ha    jagua mbaHyru pe
     A1sg.ask A2sg.know Q  A3.chase COMPL dogs  cars    acc
EXPLANATION:
There are different number of realized strings for eng2gug and shu2gug, due to the difference of number of the 'you' pronoun, which in English is ambiguous between singular and plural, while only being singular in Chadian Arabic.
There are 4 transfer outputs that generate strings in eng2gug, with a total of 640 parses (32+96+128+384).
32 realized strings without any overt pronouns. 2 possibilitis for 'you' singular/plural. 2 possibilites for the question clitics =pa/=piko. 2 possibilities for the word order in the main clause. 2 possibilities for the optional use of the accusative clitic =pe. 2 possibilites for the word order of the internal embedded clause. That is 2*2*2*2*2 = 32.
96 realized strings when only the overt pronoun 'I' is used. As the 3 word group at the level of the main clause can have 6 word orders, the calculation is the same as in the previous group of 32 realized strings, but instead of just 2 possible word order for the main clause, now 6. 6*2*2*2*2 = 96
128 realized strings with only the overt pronoun 'you' in singular/plural in the middle embedded clause. The external main cluase has still 2 word order. The middle embedded clause though, with 3 elements, has 4 possible combination as a front element, as one of the elements that is not the internal embedded clause has to be at the front of this clause with the question clitic =pa/=piko, those are one of the two 'you's or the corresponding verb predicates. Then 2 possible combinations for the rest of that middle embedded clause. Then 2 possible question clitics. 2 possibilites because of the optional use of the accussative clitics, and two possiblities in the word order of the most internal embedded clause: 2*4*2*2*2*2 = 128.
384  realized strings when all overt pronouns are used. 6 word orders at the main cluase level. 4 possible front word for the middle embedded clause, 2 possible question clitics =pa/=piko, and 2 possible order for the rest of word groups in the middle embedded clause. 2 times for the optional use of accusative markers, and two times for the word order of the most internal embedded clause. That makes 6*4*2*2*2*2 = 384 realizations.
For shu2gug, the realized strings are just cut in half, because the 'you' pronoun is singular. Therefore we have 16+48+64+192 =  320 realized strings.

MMT sentence # 9
eng: cats and dogs chase cars
shu: biss-PL wa kalib-PL y-itaarid-u watiir-PL
gug: mbarakaja ha   jagua omunNa   mbaHyru pe
     cats      CONJ dogs  A3.chase cars    acc
EXPLANATION:
For eng2gug and shu2gug, we get 12 string realizations in PG. These realizations, coming in a single transfer output, are composed of:
6 word orders of the 3 word groups.
2 times the optional use of the accusative clitic marker =pe.
Therefore 6*2 = 12 realized strings.

MMT sentence # 10
eng: Dogs chase cars and cats chase dogs
shu: kalib-PL y-itaarid-u watiir-PL wa biss-PL y-itaarid-u kalib-PL
gug: jagua omunNa   mbaHyru pe  mbarakaja omunNa   jagua pe
     dogs  A3.chase cars    acc cats      A3.chase dogs  acc
EXPLANATION:
For eng2gug and shu2gug, by using a single transfer output, we get 270 realized strings in PG. Nevertheless, we have noticed that there are some strings missing in the realizations, as they should be 288.
These are two sentences, separated optionally by the conj clitic ha. Therefore 2 times.
Each sentence is composed of three words, that can combine into 6 different word orders.
The accussative clitic can be use optionally in each sentence direct object argument.
Therefore: 2 * 6 *2 *6* 2 = 288.
In section 5 we discuss our findings when trying to find the missing string realizations.

MMT sentence # 11
eng: Cats chase dogs and sleep
shu: biss-PL y-itaarid-u kalib-PL wa naam-o
gug: mbarakaja omunNa   jagua ha   oike
     cats      A3.chase dogs  CONJ A3.sleep
EXPLANATION:
For eng2gug and shu2gug we get the same 8 string realizations in PG. They come together from the combination of the following factors:  
There are two word order for the constituents inside the transitive VP (V, NP and NP,V).
The optional use of the transitive clitic =pe on the noun 'dog'.
The free word order of the main clause cat/VP.
Therefore 2*2*2  = 8 string realizations.

MMT sentence # 12
eng: Do cats chase dogs ?
shu: biss-PL y-itaarid-u kalib-PL walla
gug: mbarakaja pa omunNa   jagua pe
     cats      Q  A3.chase dogs  acc
EXPLANATION:
For eng2gug and shu2gug we get the same 20 string realizations in our PG grammar. There are 6 word order for the three word constituents (subject, object, verb predicate) in the sentence. 2 times for each of the question clitics =pa/=piko. Then for the VOS, VSO, SVO, SOV word orders, 2 times, as the object can take optionally the =pe accussative clitic. In our grammar, we were not able to implement the =pe clitic in the yes/no question clause, when the direct object is at the front of the sentence, therefore this last part doesn't happen for OSV and OVS word order.
Therefore (6*2) + (4*2) = 20 realized strings.  

MMT sentence # 13
eng: Hungry dogs eat
shu: kalib-PL jii'aan-PL y-aakul-u
gug: jagua vareHa okaru
     dogs  hungry A3.eat
EXPLANATION:
For eng2gug and shu2gug we get the same 2 string realizations in PG. As the adjectives come in our grammar after the noun they modifiy forming an NP, there are only two word order possible (NP + VP, VP + NP). 
Therefore 2 string realizations.

MMT sentence # 14
eng: Dogs eat quickly
shu: kalib-PL y-aakul-u ajala
gug: jagua okaru  pyaHe
     dogs  A3.eat quick
EXPLANATION:
For eng2gug and shu2gug we get the same 2 string realizations in PG. Adverbs function the same way as adjectives in PG. They follow their modifee, in this case the verb predicate, forming a VP. Therefore there are only two word order possible: (NP + VP, VP + NP). 
Therefore 2 string realizations.

MMT sentence # 15
eng: The dogs are hungry
shu: al-kalib-PL jii'aan-PL
gug: lo     jagua ivareHa
     DET.pl dogs  O3.hungry
EXPLANATION:
For eng2gug and shu2gug we get the same 4 string realizations in PG. The factors influencing these different realizations are:
2 times for the optional use of a determiner in front of the noun.
2 times for the free word order of the constituents: NP + AP, AP + NP
Therefore 2*2 = 4 string realizations.

MMT sentence # 16
eng: The dogs are in the park
shu: al-kalib-PL fi al-naga'a
gug: lo     jagua oime           yvyraty apyteApe
     DET.PL dogs  A3.be+located  park    in
EXPLANATION:
For eng2gug and shu2gug we get the same 24 string realizations in PG.
2 times for the optional use of a determiner in front of the noun 'dog'.
2 times for the optional use of a determiner in front of the noun 'park'.
6 times for the free word order of the constituents: NP, V, PP
Therefore 6*2*2 = 24 string realizations.

MMT sentence # 17
eng: The dogs are the cats
shu: al-kalib-PL al-biss-PL
gug: jagua mbarakaja
     dogs  cats.PRED
EXPLANATION:
For eng2gug and shu2gug we get the same 4 string realizations in PG. This sentence uses a zero copula construction where the second noun 'cat' is a noun predicate that takes 'the dog' as an argument.
2 times for the optional use of a determiner in front of the noun 'dog'.
2 times for the free word order of the constituents: NP, VP.
Therefore 2*2 = 4 string realizations.

MMT sentence # 18
eng: Who sleeps ?
shu: yaatu y-unuum-0
gug: maAva pa oike
     who   Q  A3.sleep
EXPLANATION:
For eng2gug and shu2gug we get the same 3 string realizations in PG. The three strings come because of the optional use of the =pa/=piko or none question marker after the wh-pronoun at the front of the question.
Therefore 3 string realizations.


MMT sentence # 19
eng: What do the dogs chase ?
shu: al-kalib-PL y-itaarid-u chunu
gug: mbaHeA pa lo     jagua omunNa
     what   Q  DET.pl dogs  A3.chase
EXPLANATION:
For eng2gug and shu2gug we get the same 12 string realizations in PG. The factors influencing this number of realizations is:
2 times for the optional use of a determiner in front of the noun 'dog'.
3 times for the optional use of the question clitic =pa/=piko.
2 times for the free word order of the constituents inside of the question clause: NP, V
Therefore 3*2*2 = 12 string realizations.

MMT sentence # 20
eng: What do you think the dogs chase ?
shu: inta t-ahsib-0 kadar al-kalib-PL y-itaarid-u chunu
gug: mbaHeA pa reimoHaA    omunNa   ha    lo     jagua 
     what   Q  A2sg.think  A3.chase COMPL DET.pl dogs
EXPLANATION:
As English is ambiguous in the number of the pronoun 'you', singular or plural, there is a distinction in the number of strings generated by the eng2gug and the shu2gug translations.
For the eng2gug, we have two generating transfer outputs: 24 + 72 = 96 string realizations.
24 realized strings for realizations without overt pronouns: 3 times for the optional use of question clitics =pa/=piko, 2 times for the 'you' singular or plural marker on the question verb predicate, 2 times for the optional use of determiner for the noun 'dog', and 2 times for word order inside of embedded clause. Therefor 3*2*2*2 = 24 strings.
96 realized strings for realizations with overt pronoun 'you', for singular and plural. With thee constituents inside of the question sentence (apart from the wh-pronoun), we have 6 possible word orders instead of just two, therefore counting the other elements as in the previous transfer output rule we have 3*2*2*6 = 96 string.
For the shu2eng, the numbers are just half, as 'you' is only singular in the Chadian Arabic sentence. Therefore using  in a similar way the calculations as in the eng2shu transfers, we have 12 + 36 = 48 realizations.

MMT sentence # 21
eng: Who asked what the dogs chase ?
shu: yaatu sa'al-0 al-kalib-PL y-itaarid-u chunu
gug: maAva pa oporandu mbaHeA lo     jagua omunNa
     who   Q  A3.ask   what   DET.pl dogs  A3.chase
EXPLANATION:
For eng2gug and shu2gug we get the same 72 string realizations in PG. These are the factos involved in the generation of theses strings in a single transfer output:
3 times for the optional use of the question clitic =pa/=piko for 'who'.
3 times for the optional use of the question clitic =pa/=piko for 'what'.
2 times for the free word order of the embedded question (VP, Clause).
2 times for the optional use of a determiner in front of the noun 'dog'.
2 times for the free word order of the constituents inside the embedded question (dog/chase).
Therefore 3*3*2*2*2 = 72 string realizations.

MMT sentence # 22
eng: I asked what the dogs chased
shu: ana sa'al-t al-kalib-PL taarad-o chunu
gug: aporandu mbaHeA lo     jagua omunNa 
     A1sg.ask what   DET.pl dogs  A3.chase
EXPLANATION:
For eng2gug and shu2gug we get the same 96 string realizations in PG, generated in two transfer ouputs, one for 24 strings, and the other for 72 strings.
24 string realization without the overt pronoun 'I':
2 times for the free word order WH-pronoun/Clause.
3 times for the optional use of the question clitics =pa/=piko for 'what'.
2 times for the optional use of a determiner in front of the noun 'dog'.
2 times for the free word order of the constituents of the question sentence (dog/chase).
Therefore 2*3*2*2 = 24 realizations.
72 string realization with overt pronoun 'I'. As the overt pronoun increases the possible word order of the main clause with 3 constituents (WH-pronoun, pronoun, clause) to 6 orders, we use the same calculations as before, including the change for the word order. Therefore 6*3*2*2 = 72 strings.

MMT sentence # 23
eng: The dog's car sleeps
gug: jagua    mbaHyru oike
     dog,POSS car     A3.sleeps
EXPLANATION:
For eng2gug and shu2gug we get the same 4 string realizations in PG. As two nouns in a possessive construction have to come in a specific order, they are fixed as a constituent. Therefore the above sentence has only two constituents to consider when looking at the number of possible free word order, which are then only two. 
Additionally, 2 times for the optional use of the determiner for the noun 'dog'.
Therefore 2*2 = 4 realizations.

MMT sentence # 24
eng: My dogs sleep
gug: chejagua      oike
     1sg.POSS.dogs A3.sleep
EXPLANATION: 
For eng2gug and shu2gug we get the same 2 string realizations in PG. Possessive pronouns occurr in PG as adpositions attached before the corresponding noun. Therefore the two realization here just demonstrate the two different positions of NP and VP. 


5.If you don't have full coverage, describe why not.

There are two sentence that in our analysis did not produce all the parses that we would have expected:

MMT sentence # 3
eng: I chase you 
shu: ana n-itaarid-0-k
gug: romunNa
DISCUSSION:
According to our understanding of PG grammar, there are some strings that are missing splitted between two of the transfer outputs used in this translation.
The transfer output that produces predicates without any overt pronoun, generates predicative verbs marked only with the portmanteau markers ro- (subject 1sg, object 2sg) and/or po- (subject 1sg, object 2pl). We are missing the predicative verb AMUNNA ('I chase'), which is only marked for the subject, but underspecified for the object (and therefore can be second or third person in the given context). The same situation happens in the second transfer output that introduces the subject pronoun (che, 'I'), as it generates strings with predicates that include only the pormanteau marker, but again we don't see AMUNNA ('I chase'). In this second transfer output, due to the free-word order, there would be two possible strings. That makes for 3 missing strings in each eng2gug and shu2gug translations.
As discussed in class, this seems to be related with the subsumption rules, which check the constrains of realized strings based on the eng2gug requirements, but also in the other direction, gug2eng. This behavious seems to be a default in our grammar, and therefore at this stage we just document it.


MMT sentence # 10
eng: Dogs chase cars and cats chase dogs
shu: kalib-PL y-itaarid-u watiir-PL wa biss-PL y-itaarid-u kalib-PL
gug: jagua omunNa   mbaHyru pe  mbarakaja omunNa   jagua pe
     dogs  A3.chase cars    acc cats      A3.chase dogs  acc

Both eng2gug and shu2gug generated each a total of 270 PG strings in a single transfer output. Nevertheless in a close inspection of the output, we realized that 18 strings were not generated. We expected a total of 288 realizations (12*12*2, as each individual sentence of the coordination can have 12 different realizations, and because the conjuntion is optional).
We tried different options to find the reason of this underperfomance. 
First we tried to identify some pattern of constituents in the missing parses. According to the combinatorics of different patterns, each possible string realization in the first sentence (from which there were twelve), should have 12 possible string realizations of the second sentence (we ignored the conjunct 'ha', as it was irrelevant for the distinction). There were three first sentences which combined with specific three second sentences would only produce the 9 different patterns (which doubled to the missing 18 considering the optional conjuntion) Using constituent labels, these are the patterns we found unavailabe:

NP V NP=ACC (CONJ) NP V NP=ACC
NP V NP=ACC (CONJ) NP NP=ACC V
NP V NP=ACC (CONJ) NP=ACC NP V
NP NP=ACC V (CONJ) NP V NP=ACC
NP NP=ACC V (CONJ) NP NP=ACC V
NP NP=ACC V (CONJ) NP=ACC NP V
NP=ACC NP V (CONJ) NP V NP=ACC
NP=ACC NP V (CONJ) NP NP=ACC V
NP=ACC NP V (CONJ) NP=ACC NP V

We took several of the missing string sentences and confirmed that the parses, which corresponded to the MRS we were missing, were being generated in a monolingual context. Also RELS and HCONS liste were not broken. The MRS of those missing parses looked also identical to the MRS of the generated realized strings in the eng2gug and shu2gug.
Also when translating from gug2eng, using othe correspondng string and MRS, we would find our original English sentece in one of the resulting realizations. We were not able to find for now the reason of thos missing parses.
After consultation with the instructor, we decided to document our findings.