# 567 LAB8
# LANGUAGE: gug / Paraguayan Guaraní
# AUTHOR: Lisa Tittle Caballero
# PARTNER: Thor Wicke Monteverde


1. One Sentence Fromm Test Corpus

Last week we were able to parse sentence #20

#Sentence.20
Source: a, attested
Vetted: t
Judgment: g
Phenomena: corpus
Ha he'i Huanchi:
ha  oeHi   Juanchi
ha  o-eHi  Juanchi
and A.3-say Juan.DIM
'And Juanito says:'

This week we decided to build on that work by parsing sentence #22

#Sentence.22
Source: a, attested
Vetted: t
Judgment: g
Phenomena: corpus
Ha he'i Pirulo-pe
Ha oeHi Pirulo pe 
Ha o-eHi Pirulo=pe 
and A.3-say Pirulo=DAT
'and he said to Pirulo'


As we discussed on GoPost, implementing this sentence involved required us to: 
1. Implement ditransitives (finally!), including defining the new type and making sure appropriate inflection applied, 2. changing our implementation of case-marking adpositions so that we have separate entries for accusative and dative version of the postposition PE, only one of which is optional. 3. Making the appropriate changes to the lexicon.


- DITRANSITIVES

—— INFLECTION
Even though they have three arguments, ditransitive verb predicates (DVPs) in PG are inflected with the same prefixes as our transitive verbs. The prefixes, which our authors refer to as co-referential markers, can co-reference either the subject or the direct object (DO) of a verb.  Subjects and DOs are co-referenced with different sets of markers, which (following the conventions in our reference grammars) we refer to as A-markers and O-markers respectively.  Whether a verb receives A- or O- marking depends on its arguments’ positions in a person hierarchy. First person arguments outrank second person arguments which outrank third person arguments. If both arguments have the same person designation an A-marker is used. This gives us patterns like those below:


#Ex.70: Transitive verb with 3PER object agrees with 1SG subject. Subject drop. 
Source: author
Vetted: f
Judgment: g
Phenomena: {pro-d, agr, pn}
ahecha vakápe
ahecha vakaA pe
a-hecha vakaA=pe
A.1SG-see cow.ANIM=ACC
‘I see the cow'

#Ex.71: Transitive verb with 3PER object agrees with 2SG subject. Subject drop. 
Source: author
Vetted: f
Judgment: g
Phenomena: {pro-d, agr, pn}
rehecha vakápe
rehecha vakaA pe
re-hecha vakaA=pe
A.2SG-see cow.ANIM=ACC
‘You see the cow'

#Ex.72: Transitive verb agrees with 3PER object agrees with 3PER subject. Subject drop. 
Source: author
Vetted: f
Judgment: g
Phenomena: {pro-d, agr, pn}
ohecha vakápe
ohecha vakaA pe
o-hecha vakaA=pe
A.3-see cow.ANIM=ACC
'He sees the cow'

#Ex.73: Transitive verb with 3PER subject agrees with 1SG object.  Object drop.
Source: author
Vetted: f
Judgment: g
Phenomena: agr
chehecha vaká
chehecha vakaA
che-hecha vakaA
O.1SG-see cow.ANIM
'The cow sees me'

#Ex.74: Transitive verb with 3PER subject agrees with 2SG object. Object drop.
Source: author
Vetted: f
Judgment: g
Phenomena: agr
ndehecha vaká
ndehecha vakaA
nde-hecha vakaA
O.2SG-see cow.ANIM
'The cow sees you'

#Ex.4: Ungrammatical verb agreement with 3per object rather 3per subject.
Source: author
Vetted: f
Judgment: u
Phenomena: agr
ju'i ihecha tunich
juHi ihecha tunich
juHi i-hecha tunich
frog.ANIM O.3-see stone.INAM
*'The frog sees the stone'

The person-ranking of an indirect object (IO) does not affect co-reference marking on the verb, which we can see in Ex.50, where we have a 1st person IO, but the verb agrees with the 2nd person subject because the DO is 3rd person.

#Ex.50: Ditransitive agrees with 2SG subject. Indirect object marked with 1SG dative pronoun. S.V.IO.DO order
Source: author
Vetted: f
Judgment: g
Phenomena: {wo, agr, pn}
nde rehechauka cheve tunich
nde rehechauka cheve tunich
nde re-hecha-uka cheve tunich
2.SG.PRON.NOM A.2SG-see-CAUS 1.SG.PRON.DAT stone.INAM
'You show me the stone'

#Ex.51: Dynamic intransitive agrees with 2SG subject. Indirect object marked with 1SG dative pronoun.
Source: author
Vetted: f
Judgment: g
Phenomena: {wo, agr, pn}
nde rehechauka cheve
nde rehechauka cheve 
nde re-hecha-uka cheve 
2.SG.PRON.NOM A.2SG-see-CAUS 1.SG.PRON.DAT 
'You show it to me'

Also if we remove the direct object as in #51 we only get one parse, even though the pronoun cheve is underspecified between dative and accusative case.  This is because if cheve were an accusative pronoun and the direct object of the verb, the coreference marker would be che- not re-. 

To capture the parallel behavior between transitive and ditransitive verbs and make use of the inflectional rules already present in our grammar, we defined a new supertype for transitive and ditransitive verbs.  

gug-trans-ditrans-verb := verb-lex &
  [ INFLECTED.PERNUM-TRANS-FLAG - ].

We then created a new ditransitive-verb-lex which inherits from this category (discussed in detail later) and updated our trans-verb-lex to inherit from this new type: 

 transitive-verb-lex := gug-trans-ditrans-verb & transitive-lex-item &
   completive-aspect-or-perfective-aspect-or-prospective-aspect-rule-dtr &
   future-aspect-rule-dtr & neg1-rule-dtr & neg2-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps & [OPT-CS in-foc]>,
    ARG-ST < [ LOCAL.CAT.HEAD +np ],
	       #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
			   HEAD +np ] ] > ]. 

The new supertype inherits from verb-lex and adds a flag feature requiring verbs of this type to go through the pernum-trans-ditrans-lex-rule outlined below to be considered fully inflected: 

pernum-trans-ditrans-lex-rule-super := add-only-no-ccont-rule & completive-aspect-or-perfective-aspect-or-prospective-aspect-rule-dtr & future-aspect-rule-dtr & infl-lex-rule & neg1-rule-dtr & neg2-rule-dtr &
  [ INFLECTED [ PERNUM-DYN-INTRANS-OR-PERNUM-TRANS-FLAG +,
                PERNUM-TRANS-FLAG +,
                PERNUM-DYN-INTRANS-OR-PERNUM-STAT-INTRANS-OR-PERNUM-TRANS-FLAG +,
                NEG1-FLAG #neg1,
                PERNUM-STAT-INTRANS-FLAG #pernum-stat-intrans,
                NEG2-FLAG #neg2 ],
    DTR gug-trans-ditrans-verb &
        [ INFLECTED [ NEG1-FLAG #neg1,
                      PERNUM-STAT-INTRANS-FLAG #pernum-stat-intrans,
                      NEG2-FLAG #neg2 ] ] ].

The linguistic facts of the language outlined above are captured by the individual lexical rule types of this position class which specify subject and object PERNUM values for each type.  For rule types with 1st person subjects there is no need to constrain PERNUM on the object since 1st person subjects will always outrank their objects.

1sg-a-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1sg ].

1sg-a-2sg-o-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1sg,
                           COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2sg ] ].

1sg-a-2pl-o-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1sg,
                           COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2pl ] ].

1sg-o-23-a-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1sg,
                           SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM non-1st ] ].

2sg-a-3-o-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2sg,
                           COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ] ].

2sg-o-3-a-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd,
                           COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2sg ] ].

3-a-3-o-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd,
                           COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ] ].

1pl-incl-a-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1pl_incl ].

1pl-excl-a-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1pl_excl ].

1pl-incl-o-23-a-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1pl_incl,
                           SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM non-1st ] ].

1pl-excl-o-23-a-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1pl_excl,
                           SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM non-1st ] ].

2pl-a-3-o-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2pl,
                           COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ] ].

2pl-o-3-a-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2pl,
                           SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ] ].

These individual lexical rule types are instantiated in irules.tdl as follows:

1sg-a-prefix :=
%prefix (* a)
1sg-a-lex-rule.

1sg-a-2sg-o-prefix :=
%prefix (* ro)
1sg-a-2sg-o-lex-rule.

1sg-a-2pl-o-prefix :=
%prefix (* po)
1sg-a-2pl-o-lex-rule.

1sg-o-23-a-prefix :=
%prefix (* che)
1sg-o-23-a-lex-rule.

2sg-a-3-o-prefix :=
%prefix (* re)
2sg-a-3-o-lex-rule.

2sg-o-3-a-prefix :=
%prefix (* nde)
2sg-o-3-a-lex-rule.

3-a-3-o-prefix :=
%prefix (* o)
3-a-3-o-lex-rule.

1pl-incl-a-prefix :=
%prefix (* ja)
1pl-incl-a-lex-rule.

1pl-excl-a-prefix :=
%prefix (* ro)
1pl-excl-a-lex-rule.

1pl-incl-o-23-a-prefix :=
%prefix (* nNande)
1pl-incl-o-23-a-lex-rule.

1pl-excl-o-23-a-prefix :=
%prefix (* ore)
1pl-excl-o-23-a-lex-rule.

2pl-a-3-o-prefix :=
%prefix (* pe)
2pl-a-3-o-lex-rule.

2pl-o-3-a-prefix :=
%prefix (* pende)
2pl-o-3-a-lex-rule.


—— Lexical Type
The new lexical type for ditransitives was modeled after the way definition of transitive verbs was produced by the customization system. This model has incorporates some redundancy, but we opted against removing it and instead defined our types as counterparts to the transitive examples shown below:


transitive-verb-lex := gug-trans-ditrans-verb & transitive-lex-item & completive-aspect-or-perfective-aspect-or-prospective-aspect-rule-dtr & future-aspect-rule-dtr & neg1-rule-dtr & neg2-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps & [OPT-CS in-foc]>,
    ARG-ST < [ LOCAL.CAT.HEAD +np ],
	       #comps &
             [ LOCAL.CAT [ HEAD +np,
			   VAL [ SPR < >,
                                 COMPS < > ] ] ] >].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD +np &
                              [ CASE acc ] ] >,
    SYNSEM.LOCAL.CAT.VAL [ SUBJ < [ LOCAL.CAT.HEAD.CASE-MARKED + ] >,
                           COMPS < [ LOCAL.CAT.HEAD.CASE-MARKED + ] > ] ].


trans-verb-lex := nom-acc-transitive-verb-lex.


Following that model we have also outlined three types in an inheritance chain: ditransitive-verb-lex is inherited by nom-acc-dat-ditransitive-verb-lex, which is inherited by ditrans-verb-lex.

The first type, ditransitive-verb-lex inherits from our gug-trans-ditrans-verb supertype and ditransitive-lex-item in matrix.tdl:

ditransitive-verb-lex := gug-trans-ditrans-verb & ditransitive-lex-item & completive-aspect-or-perfective-aspect-or-prospective-aspect-rule-dtr & future-aspect-rule-dtr & neg1-rule-dtr & neg2-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps1 & [OPT-CS in-foc], #comps2 & [OPT-CS in-foc] >,
    ARG-ST < [ LOCAL.CAT.HEAD +np ],
             #comps1 & [ LOCAL.CAT [ VAL [ SPR < >, COMPS < > ],
                                     HEAD +np  ] ],
             #comps2 & [ LOCAL.CAT [ VAL [ SPR < >, COMPS < > ],
                                     HEAD +np  ] ] > ].

ditransitive-lex-item := basic-three-arg-no-hcons & basic-icons-lex-item &
   [ ARG-ST < [ LOCAL.CONT.HOOK [ INDEX ref-ind & #ind1,
				  ICONS-KEY.IARG1 #clause ] ],
	      [ LOCAL.CONT.HOOK [ INDEX ref-ind & #ind2,
				  ICONS-KEY.IARG1 #clause ] ],
	      [ LOCAL.CONT.HOOK [ INDEX ref-ind & #ind3,
				  ICONS-KEY.IARG1 #clause ] ] >,
     SYNSEM [ LKEYS.KEYREL [ ARG1 #ind1,
			     ARG2 #ind2,
			     ARG3 #ind3 ],
	      LOCAL.CONT.HOOK.CLAUSE-KEY #clause ] ].

ditrans-lex-item specifies the length of our type’s ARG list and ensures that we end up with the right semantics. We also inherit from the daughter types of our negation and aspect rules so that verbs of this type can be inflected for aspect and negation. In the body of the rule we specify the length of the type’s COMPS list, and identify those arguments with the last two elements on the ARG list.  Dropped arguments are constrained to be in-foc, all arguments are constrained to be [HEAD +np] (again following the model provided by the customization system), and the elements on the COMPS list are constrained to have empty VAL.COMPS & VAL.SPR values.

Our next type nom-acc-dat-ditransitive-verb-lex inherits from ditransitive-verb-lex and adds information about case.

nom-acc-dat-ditransitive-verb-lex := ditransitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD +np &
                              [ CASE acc ] ],
             [ LOCAL.CAT.HEAD +np &
                              [ CASE dat ] ] >,
    SYNSEM.LOCAL.CAT.VAL [ SUBJ < [ LOCAL.CAT.HEAD.CASE-MARKED + ] >,
                           COMPS < [ LOCAL.CAT.HEAD.CASE-MARKED + ],
                                   [ LOCAL.CAT.HEAD.CASE-MARKED + ] > ] ].

The first argument is constrained to be [CASE nom], the second [CASE acc], the third [CASE DAT].  All the elements on the VAL.SUBJ and VAL.COMPS lists are constrained to be [LOCAL.CAT.HEAD.CASE-MARKED +].  The last two elements on the ARG list are still [HEAD +np] but the first argument is further constrained to be [HEAD noun]. 

Finally ditrans-verb-lex inherits from nom-acc-dat-ditransitive-verb-lex  and is instantiated in the lexicon with the following entries

ditrans-verb-lex := nom-acc-dat-ditransitive-verb-lex.

hechauka := ditrans-verb-lex &
   [STEM<"hechauka">,
    SYNSEM.LKEYS.KEYREL.PRED "_show_v_rel"].

meHeN := ditrans-verb-lex &
   [STEM<"meHeN">,
    SYNSEM.LKEYS.KEYREL.PRED "_give_v_rel"].

eHi := ditrans-verb-lex &
  [ STEM <"eHi">,
    SYNSEM.LKEYS.KEYREL.PRED "_say_v_rel"]. 

—— Phrasal Type

As ditransitive verbs have two COMPS elements, we added a second head-comp/comp-head rule to connect those complements to the head predicate. Because of the free word order in PG, we have head-comp and comp-head versions:


head-comp-phrase-2 := basic-head-2nd-comp-phrase & head-initial-head-nexus  &
 [ SYNSEM.LOCAL.CAT [ HEAD +nvjrcdmo, 
          	      EC #ec,
          	      IC #ic,
                      VAL.COMPS.FIRST.OPT - ], 
   HEAD-DTR.SYNSEM.LOCAL.CAT [ EC #ec,
                               IC #ic ]].

comp-head-phrase-2 := basic-head-2nd-comp-phrase & head-final-head-nexus &
   [ SYNSEM.LOCAL.CAT [	HEAD +nvjrcdmo, 
        		EC #ec,
          		IC #ic,
                      VAL.COMPS.FIRST.OPT - ],  
   NON-HEAD-DTR.SYNSEM.LOCAL.CAT [ EC #ec,
             			   IC #ic ]].

They were already defined in our grammar with the following:

head-comp-phrase-2 := basic-head-2nd-comp-phrase & head-initial-head-nexus.

comp-head-phrase-2 := basic-head-2nd-comp-phrase & head-final-head-nexus.

And in rules.tdl with:

head-comp-2 := head-comp-phrase-2.

comp-head-2 := comp-head-phrase-2.

We expanded them to include and copy up the same features as our first head-comp/comp-head rules. Also, when we first tested the rules we observed that our indirect complement could attach as the first or the second complement when the direct object was dropped, leading to spurious double parses with the same MRS values. We fixed this by adding the constraint [VAL.COMPS.FIRST.OPT -].

So now an unambiguous sentence like #51 parses correctly with just one parse:

#Ex.51: Dynamic intransitive agrees with 2SG subject. Indirect object marked with 1SG dative pronoun.
Source: author
Vetted: f
Judgment: g
Phenomena: {wo, agr, pn}
nde rehechauka cheve
nde rehechauka cheve 
nde re-hecha-uka cheve 
2.SG.PRON.NOM A.2SG-see-CAUS 1.SG.PRON.DAT 
'You show it to me'


— CASE-MARKING ADPOSITIONS
The indirect objects of DVPs are marked with an obligatory dative marker. These arguments can take the form of either a dative pronoun or an NP combined with the case-marking postposition ’pe.’  Because the accusative case-marking adposition shares the same form as the dative, these were originally instantiated in the lexicon with a single entry that was underspecified between dative and accusative case.   However, the accusative case markers are optional and the dative markers are not, which necessitated creating separate entries instead.  We added the following to lexicon.tdl:

acc-marker := case-marking-adp-lex &
  [ STEM < "pe" >,
    SYNSEM.LOCAL [ CONT [ HOOK [ ICONS-KEY.IARG1 #clause,
                                 CLAUSE-KEY #clause ],
                          ICONS <!  !> ],
                   CAT.HEAD [ CASE ACC,
                              CASE-MARKED + ] ] ].

dat-marker := case-marking-adp-lex &
  [ STEM < "pe" >,
    SYNSEM.LOCAL [ CONT [ HOOK [ ICONS-KEY.IARG1 #clause,
                                 CLAUSE-KEY #clause ],
                          ICONS <!  !> ],
                   CAT.HEAD [ CASE DAT,
                              CASE-MARKED + ] ] ].


And, because these entries are semantically empty, updated trigger.mtr with the following:

acc-marker_gr_1 := arg0e_gtr &
  [ CONTEXT.RELS <! [ ARG1 individual & #i ] !>,
    FLAGS [ SUBSUME < #i >,
            TRIGGER "acc-marker" ] ].

acc-marker_gr_2 := arg0e_gtr &
  [ CONTEXT.RELS <! [ ARG2 individual & #i ] !>,
    FLAGS [ SUBSUME < #i >,
            TRIGGER "acc-marker" ] ].


dat-marker_gr_1 := arg0e_gtr &
  [ CONTEXT.RELS <! [ ARG1 individual & #i ] !>,
    FLAGS [ SUBSUME < #i >,
            TRIGGER "dat-marker" ] ].

dat-marker_gr_2 := arg0e_gtr &
  [ CONTEXT.RELS <! [ ARG2 individual & #i ] !>,
    FLAGS [ SUBSUME < #i >,
            TRIGGER "dat-marker" ] ].

dat-marker_gr_3 := arg0e_gtr &
  [ CONTEXT.RELS <! [ ARG3 individual & #i ] !>,
    FLAGS [ SUBSUME < #i >,
            TRIGGER "dat-marker" ] ].


As the dative 'pe' is obligatory, but the accusative 'pe' optional, nouns were generally
classified as having CASE non-dat. If a verb predicate needs a dative argument, this is handled through unification with the case marker 'pe' dative, which no longer identifies its case with that of its complement.  To implement this the case hierarchy was changed to include the type non-dat:

case := *top*. 
non-nom := case.
non-dat := case.
nom := non-dat.
dat := non-nom.
acc := non-nom & non-dat.
loc := non-nom & non-dat.

common-noun-lex was constrained to [CASE non-dat], and case-marking-adp-lex was updated so that there is no longer an identification between its case and the case of the noun complement it unifies with (which by default would be non-dat). 

common-noun-lex := noun-lex & 
  [ SYNSEM.LOCAL[ CAT.HEAD.CASE non-dat,
                  CONT.HOOK.INDEX.PNG.PERNUM 3rd ]].


case-marking-adp-lex :=  basic-one-arg & raise-sem-lex-item &
  [ SYNSEM.LOCAL.CAT [  EC - , 
                        IC - , 
                        HEAD adp &
                            [ MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comps >,
                             SPEC < > ] ],
    ARG-ST < #comps &
             [ LOCAL.CAT [ VAL.SPR < >,
                           HEAD noun &
              		   [ CASE-MARKED - ] ] ] > ].
 
CASE-MARKED is defined as a property of +np head-types with the following in PG.tdl

+np :+ [ CASE case,
         CASE-MARKED bool].

The [CASE-MARKED -] restriction on the complement of our case-marking-adp-lex prevents unification with pronoun complements, which are constrained in the following way:

pron-nom-noun-lex := pron-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE nom,
                            CASE-MARKED + ] ].

pron-nonagent-noun-lex := pron-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE non-nom,
                            CASE-MARKED + ] ]. 

bare-np-phrase inherits from basic-bare-np-phrase which inherits from head-only in matrix.tdl which has the following identification between it’s HEAD-DTR and ARGS:

head-only := unary-phrase & headed-phrase &
  [ HEAD-DTR #head,
    ARGS < #head > ].

So we didn’t have to do any additional work to allow for arguments that have gone through the bare-np-rule.


— ADDITIONAL CHANGES TO THE LEXICON

Since we defined proper nouns last week, adding Pirulo was simple.  We just added the following new entry to lexicon.tdl:

	Pirulo := proper-noun-lex &	
	  [ STEM < “Pirulo” >,
	    SYNSEM.LKEYS.KEYREL.CARG “Pirulo” ].

Which inherits from our proper-noun-lex defined in PG.tdl:

	proper-noun-lex := non-poss-com-noun-lex & no-spr-noun-lex & com-anim-noun-lex & 
			   named-relation.

Also, as alluded to above, we updated our entry for eHi so that instead of instantiating trans-verb-lex, it instantiates ditrans-verb-lex:

	eHi := ditrans-verb-lex &
	  [ STEM <"eHi">,
	    SYNSEM.LKEYS.KEYREL.PRED "_say_v_rel"]. 


— END STATE
  
Our new sentence now parses with our target semantics. We also get one additional parse, with the meaning “He said Pirulo to someone,” because the accusative marker is also written as ‘pe,’ and in our free word order language, this makes #22 ambiguous.  

#Sentence.22
Source: a, attested
Vetted: t
Judgment: g
Phenomena: corpus
Ha he'i Pirulo-pe
Ha oeHi Pirulo pe 
Ha o-eHi Pirulo=pe 
and A.3-say Pirulo=DAT
'and he said to Pirulo'

We are able to generate from both of our parses. When we generate from the tree where =pe is identified as an accusative marker we get four parses: both Verb/Argument orders, each with a pe-marked and non-pe-marked option.  When we generate from the tree where =pe is identified as a dative marker, we correctly get only two parses: ‘ha Pirulo pe oeHi,’ and ‘ha oeHi Pirulo pe.’  


2. Changes to semi.vpm

— SF

SF : SF
  prop <> prop
  ques <> ques
  prop-or-ques >> prop-or-ques 
  prop << prop-or-ques
  comm <> comm
  prop-or-ques << [e]
  * <> *

Initially or semi.vpm had the following line ‘prop-or-ques <> prop-or-ques’ which led us to get question variants of sentences without overt question marking, so the English sentence “Dogs sleep” generated Guarani sentences like “oike piko jagua”  All of the sentences with question particles were well formed and correspond to sentences like "Was it sleep, that the dogs did?"  and "Was it the dogs that slept?"   But we decided it would be better require sentences to be overtly marked as questions in a source language to get overt marks of questions in our language.  We did this by replacing the initial equivalency with a line ‘prop << prop-or-ques’ changing incoming prop-or-ques values to prop, and the line ‘prop-or-ques >> prop-or-ques’ which preserves the prop-or-ques value going out. We also added the line  ‘prop-or-ques << [e]’ assigning incoming event types with unlisted or undefined SF values the default value of prop-or-ques.   We did not assign a default SF to underspecified event types in Guarani, because we have set up our grammar to require all well-formed sentence to have non-under-specified SF value (more on this later.). 

- COG-ST

COG-ST : COG-ST
  type-id <> type-id
  uniq-id <> uniq-id
  familiar <> familiar
  activated <> activated
  in-foc <> in-foc
  activ+fam <> activ+fam
  uniq+fam <> uniq+fam
  activ-or-more <> activ-or-more
  uniq-or-less <> uniq-or-less
  uniq+fam+act <> uniq+fam+act
  fam-or-more <> fam-or-more
  fam-or-less <> fam-or-less
  uniq-or-more <> uniq-or-more
  activ-or-less <> activ-or-less
  * >> type-id
  * <> *

Our grammars were very clear that cog-st values for common nouns are underspecified in Guarani, but to cut down generation, which, in a free word order language can already be pretty robust, we decided to add the line  * >> type-id.  This cuts down our generation from sentence like “jagua oguata,” “(the)dogs walk” from 4 to 2. We feel doing this is helpful, since, as it is, a sentence like our old standby “juHi ohecha vakaA” with the MRS the corresponding to “the frog sees the cow” still generates 12 parses, all well-formed.
We left the catch all ‘* <> *’ line at the end to allow underspecified or other COG-ST to remain underspecified in Guarani.


—PERNUM

Guarani uses a PERNUM feature which, using the DELPHIN wiki for guidance, I mapped out to PER and NUM features in the following way. 

PNG.PERNUM : PER NUM
  1sg <> first sg
  2sg <> second sg
  3sg <> third sg
  1pl <> first pl
  1pl_incl <> first_incl pl
  1pl_excl <> first_excl pl
  2pl <> second pl
  3pl <> third pl
  1st <> first !
  1st << first *
  2nd <> second !
  2nd << second *
  3rd <> third !
  3rd << third *
  sg <> ! sg
  sg << * sg
  pl <> ! pl
  pl << * pl
  * >> ! !
  ! << * *


We also took this opportunity to fix the our naming of PERNUM types grammar-internally.  We had been using capitalized names, but that is now fixed both the here and in all the relevant places in our grammar.  Side note: We had a similar capitalization issue with our CASE types, which we also fixed in grammar-internally this week, but is of course not relevant to semi.vpm.

—TENSE

E.TENSE : TENSE
  ! << [e]
  [e] >> !
  * <> *

Since tense is not relevant to Guarani, semi.vpm now explicitly states that we ignore all tense information coming in and output no tense information.  I left the catch-all at the end, though it is technically no longer necessary. 

—ASPECT

As set out in the lab instructions, I defined no-aspect in PG.tdl:

;;; Aspect

no-aspect := aspect.
perfective := aspect.
completive := aspect.
future := aspect.
prospective := aspect.
future-completive := future & completive.
future-perfective := future & perfective.

I used ‘* >> no-aspect’ and ‘no-aspect << [e],’  to set default value for events with underspecified aspect to be no-aspect and assign that same value to events from a source language that have either underspecified aspect or an aspect that is not in our current inventory.

E.ASPECT : ASPECT
  future-perfective <> future-perfective
  perfective <> perfective
  future-completive <> future-completive
  completive <> completive
  future-completive <> future-completive
  future-perfective <> future-perfective
  future <> future
  prospective <> prospective
  * >> no-aspect
  no-aspect << [e] 

—MOOD

E.MOOD : MOOD
  * >> mood
  mood << [e]

Mood is also not relevant for our current grammar. In this instance I copied the notations used in semi.vpm for the English grammar we are working with this week.  Rather than using the same notation I used to deal with tense. 

- GENDER

I initially dealt with gender mismatches with the following.

PNG.GEND : GEND
  hum <> hum
  inam <> inam
  anim <> anim
  * << [p]
  * << !
  * <> *

But following the comments in class, I just deleted the section entirely and that works just as well :)


3. First MT

Machine translation is working! Our first sentence was ‘Dogs sleep’  which we used to help guide all of the semi.vpm changes outlined above.  We now get two parses in the target language: ‘jagua oike’ and ‘oike jagua.’ 

-ADDITIONAL WORK
Because we had extra time this week, we translated all of the MT sentences into Guarani and added the relevant vocabulary to our lexicon.  More on that next week, but it allowed us to play with translating more sentences.  

Attempt #2:

We tried: 
“Who sleeps” 

Which worked beautifully with the three parses we expect!!!
“maAva piko oike,”  “maAva pa oike,” and “maAva oike”


Attempt #3:

We also tried:
“Do dogs chase cats” 

Which works but gives us all the possible constituents in first position, and we may or may not want to say that we want a Guarani result equivalent to the English, “Do DOGS chase cats?” —> i.e., “Is it dogs that chase cats?”
  

Attempt #4:

Then we got (perhaps too) bold thought it would be fun to try: 
“I ask whether you know that dogs chase cars.”  

Which pointed us to a mismatch in the way we had defined the PRED values for our pronouns, which was originally _pron_n_rel.  We changed the predications to match what was in the English grammar so now we have the following in our lexicon:

che := 1sg-pron-nom-noun-lex &
  [ STEM < "che" >,
    SYNSEM.LKEYS.KEYREL.PRED "pron_rel" ].

nde := 2sg-pron-nom-noun-lex &
  [ STEM < "nde" >,
    SYNSEM.LKEYS.KEYREL.PRED "pron_rel" ].

haHe := 3sg-pron-nom-noun-lex &
  [ STEM < "haHe" >,
    SYNSEM.LKEYS.KEYREL.PRED "pron_rel" ].

nNande := 1pl-incl-pron-nom-noun-lex &
  [ STEM < "nNande" >,
    SYNSEM.LKEYS.KEYREL.PRED "pron_rel" ].

ore := 1pl-excl-pron-nom-noun-lex &
  [ STEM < "ore" >,
    SYNSEM.LKEYS.KEYREL.PRED "pron_rel" ].

peeN := 2pl-pron-nom-noun-lex &
  [ STEM < "peeN" >,
    SYNSEM.LKEYS.KEYREL.PRED "pron_rel" ].

haHekueAra := 3pl-pron-nom-noun-lex &
  [ STEM < "haHekueAra" >,
    SYNSEM.LKEYS.KEYREL.PRED "pron_rel" ].

cheve := 1sg-pron-nonag-noun-lex &
  [ STEM < "cheve" >,
    SYNSEM.LKEYS.KEYREL.PRED "pron_rel" ].

ndeve := 2sg-pron-nonag-noun-lex &
  [ STEM < "ndeve" >,
    SYNSEM.LKEYS.KEYREL.PRED "pron_rel" ].

chupe := 3sg-pron-nonag-noun-lex &
  [ STEM < "chupe" >,
    SYNSEM.LKEYS.KEYREL.PRED "pron_rel" ].

nNandeve := 1pl-incl-pron-nonag-noun-lex &
  [ STEM < "nNandeve" >,
    SYNSEM.LKEYS.KEYREL.PRED "pron_rel" ].

oreve := 1pl-excl-pron-nonag-noun-lex &
  [ STEM < "oreve" >,
    SYNSEM.LKEYS.KEYREL.PRED "pron_rel" ].

pendeve := 2pl-pron-nonag-noun-lex &
  [ STEM < "pendeve" >,
    SYNSEM.LKEYS.KEYREL.PRED "pron_rel" ].

chupekueAra := 3pl-pron-nonag-noun-lex &
  [ STEM < "chupekueAra" >,
    SYNSEM.LKEYS.KEYREL.PRED "pron_rel" ].


And now the sentence works, which is exciting! But, with a LOT of parses in the source language, which is less exciting.  Of course, this isn’t surprising given free word order and how long the sentence is. Plus one of the sources of this large number of parses is that ask is defined in English as as having three semantic arguments, “I ask someone something” so Guarani is producing paraphrases with pronouns for ALL of the possible PERNUM values, which, of course are optionally present or absent. We suspect constraining this will be the work of a transfer rule (?) but we’ll have to wait and see.


4. More improvements to the grammar


—OVERGENERATION

——Spurious piko/pa
#Sentence.20
Source: a, attested
Vetted: t
Judgment: g
Phenomena: corpus
Ha he'i Huanchi:
ha  oeHi   Juanchi
ha  o-eHi  Juanchi
and A.3-say Juan.DIM
'And Juanito says:'

Last week when we generated from the parses from our corpus example we got a lot of sentences.  Some of this generation was well-formed and due to the fact that we had not specified a default for underspecified aspect values.  With the changes to semi.vpm that problem was fixed. However, when generating from parses that used coordination we were also seeing a lot of options with ‘pa’ and ‘piko,’ e.g. ‘ha oeHi ha Juanchi piko,’ not only in this example but in other examples.  When we looked closely at our coordinated phrases, we noticed that they were underspecified for SF, and this was leading to a lot of over-generation when they “fired” so to speak.  There were a lot of ways to potentially fix this, but in our investigations we also noticed that our coordinated phrases were the only phrases allowed to unify with the root, without first passing through and int-cl or decl-cl, and we thought for the purposes of uniformity it would be better to make that a requirement for our coordinated phrases as well.  This fix was accomplished by changing making sure our s-coord phrase was designated as [MC na].

s-coord-phrase :+
  [ SYNSEM.LOCAL.CAT [ MC na, EC #ec, IC #ic],
    LCOORD-DTR.SYNSEM.LOCAL.CAT [ MC bool, EC #ec,  IC #ic],
    RCOORD-DTR.SYNSEM.LOCAL.CAT [ MC bool, EC #ec,  IC #ic]].

Now our coordination phrases are required to pass through either int-cl or decl-cl before unifying with the root, in keeping with the way we are treating all other phrases in the grammar, and because of this none of our well-formed sentences has an underspecified SF value. 

Once we implemented that change, we are not getting any parses with piko and pa, but we were getting some spurious parses with complementizer “ha” appearing in a non-embedded clause, and this led us to discover that our EC and IC information, after being carefully passed up, was being ignored by the gug-scopal-mod-phrase we added last week.  So we added the constraint that the head daughter of this phrase be both [EC -] and [IC -], and that fixed the problem.   Now when we generate from our coordinated sentences we see only the two parses we expect, with and with out the coordination word, which (of course) is also spelled ‘ha.’

gug-scopal-mod-phrase := basic-head-mod-phrase-simple & head-final & 
			 head-compositional &
  [ SYNSEM [ LOCAL.CAT [ MC na,                       
			 EC -,                        
			 IC -],
	     NON-LOCAL [ QUE <! !>, 
			 SLASH <! !>, 
			 YNQ <! !> ]],
    HEAD-DTR.SYNSEM.LOCAL.CAT [ MC na,
                                IC -,
                                EC -,
                                HEAD verb & [MOD < >],
                                VAL [ SPEC < >, 
                                      SPR < >, 
                                      SUBJ < >, 
                                      COMPS < > ]],
    NON-HEAD-DTR.SYNSEM.LOCAL [ CAT [ HEAD adv & 
					   [ MOD < [ LOCAL scopal-mod ] >],
                                      VAL [SPR < >, 
					   SUBJ < >, 
					   COMPS < > ]],
                                      CONT.HOOK #hook ],
    C-CONT [ HOOK #hook,
	     HCONS <! !>,
	     ICONS <! !> ] ].

Since we were already specifying [EC -] and [IC -] on the phrase itself, we will do a little more experimenting next week to see if wouldn’t be better to just identify those values between the rule and the head daughter.  For now we are satisfied that this works and we haven’t lost any parses we wanted to keep. 

—— spurious ‘piko pe’ and ‘piko pa’ parses

As you noted last week generating from sentences like #125 resulted in spurious parses where =pe was attaching after =piko or =pa to create sentences like “mbaHeA piko pe rejapo”

#Ex.125: Wh question for 'what' object, with piko question clitic
Source: d
Vetted: f
Judgment: g
Phenomena: {wh, wo}
mba'é piko rejapo ?
mbaHeA piko rejapo
mbaHeA=piko re-japo
what=Q A.2SG-do
'What do you do?'

Thanks to the information provided by the parse tree from the spurious generated sentences, this turned out to be a relatively straightforward fix.  We just added a constraint to the COMPS of case-marking-adp-lex requiring its complement to be an empty YNQ dif-list.  

case-marking-adp-lex :=  basic-one-arg & raise-sem-lex-item &
  [ SYNSEM.LOCAL.CAT [  EC - , 
                        IC - , 
                        HEAD adp & [MOD < >] ,
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comps & [NON-LOCAL.YNQ <! !>] >,
                             SPEC < > ] ],
    ARG-ST < #comps &
             [ LOCAL.CAT [ VAL.SPR < >,
                           HEAD noun & [CASE-MARKED - ] ] ] > ].

Now generating from #125 gets the four well-formed parses we expect. The one identical to the original sentence as well as: ‘mbaHeA pa rejapo,’ ‘mbaHeA pe rejapo’ ‘mbaHeA rejapo.’
  

—NOUNS REQUIRING A POSSESSOR
The last fix we accomplished this week was to deal with our perpetually ill-formed sentence #105. Guarani forbids inalianable possessions from occurring without possessive marking.  Somewhat disturbingly this is true even if you are saying something like “I had liver for dinner.” This means that while #104 is grammatical, #105 is not, but we had not implemented a way to block it from parsing until this week. 

#Ex.104: Affix-marked Possessive. Human Possessor. Inanimate Inalienable Possession. Subject Drop.
Source: author
Vetted: f
Judgment: g
Phenomena: poss
ahunga chepo
ahunga chepo
a-hunga che-po
A.1SG-hurt 0.1SG-hand.INAM
'I hurt my hands'

#Ex.105: Inalianable possession cannot have a non-possessive determiner, requires a possessor.
Source: author
Vetted: f
Judgment: u
Phenomena: poss
ahunga lo po
ahunga lo po
a-hunga lo po
A.1SG-hurt the.PL hand.INAM
*'I hurt the hands'

We implemented that this week by defining a new FLAG and a new lexical-type.   
First we added a flag POSS-FLAG to inflected and infl-satisfied in PG.tdl

inflected :+ [ POSS-FLAG luk,
    PERNUM-STAT-INTRANS-FLAG luk,
    NEG1-FLAG luk,
    PERNUM-DYN-INTRANS-OR-PERNUM-TRANS-FLAG luk,
    NEG2-FLAG luk,
    PERNUM-DYN-INTRANS-OR-PERNUM-STAT-INTRANS-OR-PERNUM-TRANS-FLAG luk,
    PERNUM-TRANS-FLAG luk ].

infl-satisfied :+ [ POSS-FLAG na-or-+,
    PERNUM-STAT-INTRANS-FLAG na-or-+,
    NEG1-FLAG na-or-+,
    PERNUM-DYN-INTRANS-OR-PERNUM-TRANS-FLAG na-or-+,
    NEG2-FLAG na-or-+,
    PERNUM-DYN-INTRANS-OR-PERNUM-STAT-INTRANS-OR-PERNUM-TRANS-FLAG na-or-+,
    PERNUM-TRANS-FLAG na-or-+ ].

Then we created a new lexical type inheriting from common-noun-lex with a [INFLECTED.POSS-FLAG -], value.

;; category for words like hand
poss-only-com-noun-lex := common-noun-lex & 
[INFLECTED.POSS-FLAG -].

Then we updated poss-lex-rule-super to include [ INFLECTED [POSS-FLAG +]. 

;; The possessive lexical rule as possessive affixes to possessums
;; e.g., chesy, che-sy, "my mother"
poss-lex-rule-super := infl-add-only-lex-rule &
 [ INFLECTED [POSS-FLAG +],
   SYNSEM.LKEYS.ALTKEYREL #altkeyrel,
   DTR common-noun-lex & [ SYNSEM.LOCAL [ CONT.HOOK [  INDEX #index,  
						       LTOP #lbl  ] ,
					  CAT [ HEAD.POSS poss-or ,
						VAL.SPR <[OPT +]> ] ]],  
   C-CONT [ HOOK [INDEX #index, 
		  LTOP #lbl  ],
	    RELS <! arg12-ev-relation &
		  [ PRED "poss_rel",
		    LBL #lbl,
		    ARG1 #index,
		    ARG2 #arg2 ],
		  quant-relation &
		  [ PRED "exist_q_rel",
		    ARG0 #arg2, 			 
		    RSTR #harg ],			
		  #altkeyrel & noun-relation &			
		  [PRED "pron_rel",			 
		   LBL #lbl2,			 
		   ARG0 #arg2 & [ COG-ST activ-or-more,			       
				  SPECI + ] ] !>,		  
	    HCONS <! qeq & [ HARG #harg, 				   
			     LARG #lbl2 ] !>,		  
	    ICONS <! !>] ].

This combination of changes forces inalianable nouns like ‘hand’ to go through a poss-lex-rule before they can “play in the syntax,” and we finally have the results we want for #104 and #105. 


5. Statement of the current overage of the grammar over your testsuite (using number you can get from Analyze|Coverage and Analyze|Overgeneration in [incr tsdb()]) and a comparison between your baseline testsuite run and your final one for this lab (see Compare|Competence).

—Corpus Stats

Analyze | Coverage
	Total Items: 21
	Positive Items: 21
	Word String 0: 6.14
	Lexical Items 0: 6.00
	Distinct Analyses: 3.00
	Total Results: 1
	Overall Coverage: 4.8

Analyze | Overgeneration
	Total Items: 0
	Negative Items: 0
	Word String 0: 0
	Lexical Items 0: 0
	Distinct Analyses: 0 
	Total Results: 0
	Overall Coverage: 100

Comparison of baseline(gold-lab7) and final version of this lab 
(Compare | Competence)

	Baseline
		lexical 0:  .70
		analyses 0: 3.0
		in 0:       4.3
		out 0:      100.0

	New
		lexical 0:  .80
		analyses 0: 3.00
		in 0:       8.7
		out 0:      100.0

We didn’t ‘lose’ our sentence from last week with the grammar changes we made, and have also achieved our goal of parsing one more sentence from our corpus this week.

#Sentence.22
Source: a, attested
Vetted: t
Judgment: g
Phenomena: corpus
Ha he'i Pirulo-pe
Ha oeHi Pirulo pe 
Ha o-eHi Pirulo=pe 
and A.3-say Pirulo=DAT
'and he said to Pirulo'

Which as noted earlier in the write-up is correctly parsing with two possible readings. the one place where we are arguably performing worse is in the one additional parse of Sentence #20.

#Sentence.20
Source: a, attested
Vetted: t
Judgment: g
Phenomena: corpus
Ha he'i Huanchi:
ha  oeHi   Juanchi
ha  o-eHi  Juanchi
and A.3-say Juan.DIM
'And Juanito says:'

Previously this was parsing with three parses.  The two which reflect subject/object ambiguity, and one coordinated phrase where ha was attaching to the S “oeHi” and then being coordinated with the predicate Juanchi.  Because of our changes to the coordination rule this scopal modifier is now allowed to attach to the coordinated phrase “oeHi Juanchi.”   The resulting MRSs ARE subtly different, but I’m not sure if we want both possibilities. If time allows, we probably still want to look into constraining this a bit more next week.
  

--TestSuite General Stats

Analyze | Coverage
	Total Items: 211
	Positive Items: 135
	Word String 0: 2.96
	Lexical Items 0: 4.91	
	Distinct Analyses: 2.61
	Total Results: 131
	Overall Coverage: 97

Analyze | Overgeneration
	Total Items: 211
	Negative Items: 76
	Word String 0: 2.97
	Lexical Items 0: 4.87
	Distinct Analyses: 0.00
	Total Results: 0
	Overall Coverage: 0.0

Comparison of baseline(gold-lab7) and final version of this lab 
(Compare | Competence)

	Baseline
		lexical 0:  1.45
		analyses 0: 2.62
		in 0:       85.9
		out 0:      1.3

	New
		lexical 0:  1.60
		analyses 0: 2.61
		in 0:       97.0
		out 0:      0.0


General analysis:

Now that we finally implemented our ditransitive verbs we saw a huge jump in coverage, from 85.9 to 97.0.  When we look at longer sentences (i-length in [5…10]), the difference is even more dramatic—-our coverage goes from 78.3 to 95.7. 

In our overgeneration results we see that we no longer have any ill-formed sentences (Yay!) the result of finally getting #105 to NOT parse for the right reasons (e.g., while still making sure #104 parsed).  This was done with the POSS-FLAG fix outlined above. 


#Ex.104: Affix-marked Possessive. Human Possessor. Inanimate Inalienable Possession. Subject Drop.
Source: author
Vetted: f
Judgment: g
Phenomena: poss
ahunga chepo
ahunga chepo
a-hunga che-po
A.1SG-hurt 0.1SG-hand.INAM
'I hurt my hands'

#Ex.105: Inalianable possession cannot have a non-possessive determiner, requires a possessor.
Source: author
Vetted: f
Judgment: u
Phenomena: poss
ahunga lo po
ahunga lo po
a-hunga lo po
A.1SG-hurt the.PL hand.INAM
*'I hurt the hands'

When look at our errors, there are some errors we expect, resulting from the grammar (correctly) not recognizing verb forms with incorrect or incomplete negation markers.  The other two errors are the result of our only still-standing to do item from the beginning of the quarter. While we have combined aspect working as we can see in 

#Ex.63: Transitive verb. Completive aspect. Future aspect. Subject drop. Object drop.
Source: author
Vetted: f
Judgment: g
Phenomena: {agr, tam, pro-d}
ahendupata
ahendupata
a-hendu-pa-ta
A.1SG-hear-COMPL-FUT
'I will have heard it all'


#Ex.66: Transitive verb. Perfective aspect. Future aspect. Subject drop. Object drop.
Source: author
Vetted: f
Judgment: g
Phenomena: {agr, tam, pro-d}
ahendumata
ahendumata
a-hendu-ma-ta
A.1SG-hear-PERF-FUT
'I will have heard it already'

We have still not implemented free word-ordering in aspect markers, so #64 and #67 still do not parse. 

#Ex.64: Transitive verb. Future aspect. Completive aspect. Subject drop. Object drop.
Source: author
Vetted: f
Judgment: g
Phenomena: {agr, tam, pro-d}
ahendutapa
ahendutapa
a-hendu-ta-pa
A.1SG-hear-FUT-COMPL
'I will have heard it all'

#Ex.67: Transitive verb. Future aspect. Perfective aspect. Subject drop. Object drop.
Source: author
Vetted: f
Judgment: g
Phenomena: {agr, tam, pro-d}
ahendutama
ahendutama
a-hendu-ta-ma
A.1SG-hear-FUT-PERF
'I will have heard it already'

We know next week is focused on machine translation, but if the fix isn’t to complicated it would be nice to try it. We think it would be very satisfying to see those last two sentences parsing, and now that we have set a default aspect value we won’t have to worry that the change will result in lots of new generation.


Comparisons: 


Compare - Wellformed/Readings/Detail
Here we see the effect of our added ditransitive verbs and we are now getting correct parses for all of the following (and many more). 

#Ex.41: Ditransitive verb agrees with 3SG object. Inanimate direct object. Animate indirect object with dative marking.
Source: author
Vetted: f
Judgment: g
Phenomena: {wo, agr, c}
ju'i ohechauka tunich vakápe
juHi ohechauka tunich vakaA pe
juHi o-hecha-uka tunich vakaA=pe
frog.ANIM.NOM A.3-gsee-CAUS stone.INAM.SG cow.ANIM=ACC
'The frog shows the stone to the cow'

#Ex.43: Ditransitive verb agrees with 3SG object. Overt accusative marking and dative marking.
Source: author
Vetted: f
Judgment: g
Phenomena: agr
ju'i ohechauka vakápe tunichpe
juHi ohechauka vakaA pe tunich pe
juHi o-hecha-uka vakaA=pe tunich=pe
frog.ANIM.NOM A.3-see-CAUS cow.ANIM=ACC stone.INAM=DAT
'The frog shows the cow to the stones'

#Ex.54: Dynamic intransitive agrees with 2SG subject. Inanimate direct object. Indirect object marked with 1SG dative pronoun. Subject drop.
Source: author
Vetted: f
Judgment: g
Phenomena: {wo, agr, pn}
rehechauka tunich cheve
rehechauka tunich cheve
re-hecha-uka tunich cheve
A.2SG-see-CAUS stone.INAM 1.SG.PRON.DAT
'You show me the stone'

#Ex.69: Ditransitive. Human subject and human object. 12.SG Portmanteau marking on verb.  Subject drop. Object drop. 
Source: author
Vetted: f
Judgment: g
Phenomena: {agr, pn, pro-d}
rome'e᷉ chupe
romeHeN chupe
ro-meHeN chupe
12.SG-give 3.SG.PRON.DAT
'I gave you to him'

#Ex.70:  Ditransitive agrees with 2SG subject. Indirect object marked with 1SG dative pronoun. Object drop prohibited because of human object.
Source: author
Vetted: f
Judgment: g
Phenomena: {pro-d, agr, pn, c}
reme'e᷉ cheve mbo'ehárape
remeHeN cheve mboHehaAra pe
re-meHeN cheve mboHehaAra=pe
A.2SG-give 1.SG.PRON.DAT professor.ANIM=ACC
'You gave the professor to me'

#Ex.111: Portmanteau marker for 12PL
Source: author
Vetted: f
Judgment: g
Phenomena: {agr, pn, pro-d}
pome'e᷉  chupe
pomeHeN chupe
po-meHeN chupe
12.PL-give 3.SG.PRON.DAT
'I gave you to him' (meaning you plural)

Of course examples with the word ‘give’ are a little pragmatically weird, but they ARE syntactically correct and they are modeled off of an example close to #111 in our source grammars (the original sentence had some additional aspectual information).  


Compare - Illformed/Readings/Detail
Here we focus in on our 5 ungrammatical examples have gone from producing and error, to correctly not parsing. Mostly from our new ditransitive verbs #52, #53 below.


#Ex.52: Indirect object marked with nominative pronoun instead of dative pronoun.
Source: author
Vetted: f
Judgment: u
Phenomena: agr
che nde rehechauka tunich 
che nde rehechauka tunich
che nde re-hecha-uka tunich
1.SG.PRON.NOM 2.SG.PRON.NOM A.2SG-see-CAUS stone.INAM
*'You show me the stone'

#Ex.53: Ditransitive verb has 2SG agreement but 3SG subject.
Source: author
Vetted: f
Judgment: u
Phenomena: pn
ha'e rehechauka tunich cheve
haHe rehechauka tunich cheve
haHe re-hecha-uka tunich cheve
3.SG.PRON.NOM A.2SG-see-CAUS stone.INAM 1.SG.PRON.DAT
*'He showed me the stone'

This is also another place where we see #105  (the hand example) correctly going from parsing to no longer parsing.

COMPARE - READING/MRS

When we originally saw this test we were seeing universal disagreement in MRS values between this week and last week because of differences to semi.vpm.  However, after adding a baseline with an updated .vpm file we can see the effects of the change to our SF values of our coordinated clauses.   In fact, with the exception of ditransitives and the other sentences that previously produced errors, scrolling through the list is quick way of identifying how many of the parses for each sentence are the result of coordination.  We were pleased how quickly we were able to identify sentence #109 and #160.

#Ex.109: Shows non-possessable noun. The only grammatical readings involve coordination of noun predicates
Source: author
Vetted: f
Judgment: g
Phenomena: poss
ahendu avatitý yvytu hata 
ahendu avatityA yvytu hata 
a-hendu avatityA yvytu hata
A.1SG-hear cornfield wind.INAM strong
'I hear it, it is the cornfield, it is the strong wind'

#Ex.160: asyndenton coordination with subject drop
Source: b
Vetted: f
Judgment: g
Phenomena: {crd, wo}
aguara opo okañy
aguara opo okanNy
aguara o-po o-kanNy
fox.ANIM.NOM A.3-jump A.3-hide
'the fox jumped and (he) hid'

Both of which we thought might contain errors because of the lack of overlap, but thanks to our notes, we quickly saw they were not expected to have any parses that didn’t involve coordination.



