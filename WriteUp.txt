# 567 LAB6
# LANGUAGE: gug / Paraguayan Guaraní
# AUTHOR: Thor Wicke Monteverde
# PARTNER: Lisa Tittle Caballero

1. Negation

PG has two constructions for sentential negation. Both involve a circumfix around the predicate of a sentence. The first sentential negation is undefined for aspect and is represented as  “nde-…-i.”  Ex.90 & Ex.203 are examples of Guarani sentences with grammatical negation of this type.

#Ex.90: Negated transitive verb. Subject drop. Object Drop.
Source: author
Vetted: f
Judgment: g
Phenomena: {neg, pro-d}
ndahechai
ndahechai
nde-a-hecha-i
NEG-A.1SG-see-NEG
'I don't see it'

#Ex.203: Negated intransitive verb.
Source: author
Vetted: f
Judgment: g	
Phenomena: neg
jagua ndojerokyi
jagua ndojerokyi
jagua nd-o-jeroky-i
dog NEG-A.3-dance-NEG
'The dog doesn't dance'

The second kind of sentential negation, represented as “nd- -moHaNi” is for utterances where future aspect is intended. Our aspect marker is glossed as FUT here to distinguish it from prospective aspect (“about to”) which we also have implemented in our grammar.  FUT is not a reference to tense and the example in #94 could mean either “I am not going to see it” or “I wasn’t going to see it.” 

#Ex.94: Negated transitive verb. Future-aspect negation. Subject drop. Object Drop.
Source: author
Vetted: f
Judgment: g
Phenomena: neg
ndahechamoHaNi
ndahechamoHaNi
nde-a-hecha-moHaNi
NEG-A.1SG-see-FUT.NEG
'I am not going to see it' / 'I wasn’t going to see it'

Both the prefix and suffix are required for negation to be grammatical, so the examples below are all ungrammatical and do not parse.

#Ex.96: Incomplete future negation marking. Missing prefix. 
Source: author
Vetted: f
Judgment: u
Phenomena: neg
okýmo'a᷉i
okyAmoHaNi
o-kyA-moHaNi
A.3-rain-FUT.NEG
*'It isn’t/wasn’t going to rain'

#Ex.204: Negated intransitive verb. Incomplete negation circumfix. Missing prefix.
Source: author
Vetted: f
Judgment: u
Phenomena: neg
jagua ojerokyi
jagua ojerokyi
jagua o-jeroky-i
dog A.3-dance-NEG
*'The dog doesn't dance'

#Ex.92: Incomplete negation marking. Missing suffix.
Source: author
Vetted: f
Judgment: u
Phenomena: neg
ndahecha
ndahecha
nde-a-hecha
NEG-A.1SG-see
*'I don't see it'

We implemented this phenomenon several weeks ago using the customization system, by choosing “simple” negation, and “Inflectional negation.”  To make sure that we got the full circumfix for our grammatical examples we created two position classes. NEG1 and NEG2. NEG1 attaches the prefix nde- and adds negation semantics.  NEG2 attaches either the -i or the -moHaNi suffix.   The -i suffix adds no additional semantic information.  The -moHaNi suffix adds future aspect.  The position classes are optional in general, but require one another if they do fire, so we can get negated and non-negated sentences, but we don’t get parses for sentences with only a prefix or only a suffix.

The .tdl changes this week were limited to making locative-verb-lex inherit from the daughters of our inflectional rules for negation and aspect as seen below:

locative-verb-lex := gug-dyn-loc-verb & trans-first-arg-control-lex-item & completive-aspect-or-perfective-aspect-or-prospective-aspect-rule-dtr & future-aspect-rule-dtr & neg1-rule-dtr & neg2-rule-dtr &

So we can now get a parse for examples like #206

#Ex.206: be+located raising verb. Contentful postpositions.  Negation.
Source: b
Vetted: f
Judgment: g
Phenomena: {cop, adp}
ndoimei kotýpe jaguandi
ndoimei koty pe jagua ndi
nd-o-ime-i koty=pe jagua=ndi
NEG-3.ACT-be.located-NEG room=in dog=with
'He/She is not located in the room with the dog'


2. One Sentence Fromm Test Corpus

The sentence we chose for this week is #20

#Sentence.20
Source: a, attested
Vetted: t
Judgment: g
Phenomena: corpus
Ha he'i Huanchi:
ha  oe   Juanchi
ha  o-e  Juanchi
and A.3-say Juan.DIM
'And Juanito says:'

As we discussed on GoPost, implementing this sentence required three key steps:  1. implementing “and” as a left-attaching scopal modifier, 2. Adding a new version of “say” to our grammar, and 3. implementing proper names. I discuss each of the three steps separately below:

— Scopal Modifier

The scopal modifier “ha” was defined with the following PG.tdl 

;;; Scopal-modifiers
scopal-lex := scopal-mod-lex & norm-sem-lex-item & norm-zero-arg & non-ynq-word &
  [ SYNSEM.LOCAL.CAT [  HEAD adv,
                        EC -, 
                        IC -,
                        VAL [ SPR < >,
                              COMPS < >,
                              SUBJ < >,
                              SPEC < > ]]].

scopal-mod-lex is inherited from matrix.tdl, but was not very constrained:

scopal-mod-lex := lex-item &
  [ SYNSEM [ LOCAL [ CAT.HEAD.MOD < [ LOCAL scopal-mod &
					    [ CONT.HOOK.LTOP #larg ]] >,
		     CONT.HCONS <! qeq & 
				 [ HARG #harg,
				   LARG #larg ] !> ],
	     LKEYS.KEYREL.ARG1 #harg ]].

We added inheritance from norm-sem-lex-item, norm-zero-arg, and non-ynq-word to make sure our semantics where appropriately defined for this lexical type.  We also specified that the type as [HEAD adv] so we could easily constrain its behavior separately from our other modifiers which are currently all [HEAD adj] even when they modify verbs.  
This type is also [EC -] because it is not required to appear in an embedded clause (like complementizer “ha”) and [IC -] because it is not required to appear in an interrogative clause (like “piko” or “pa”).   Finally the VAL features for SPR/COMPS/SUBJ/SPEC were all defined as empty.

;;; Scopal Modifiers
ha4 := scopal-lex &
   [ STEM < "ha" >,
     SYNSEM.LKEYS.KEYREL.PRED "_and_c_rel"].


The new type was instantiated in our lexicon with the entry above. The _and_c_rel predication is based of a similar example in the ERG (thanks for finding that for us).

We also implemented a gug-scopal-mod-phrase rule in PG.tdl, which inherits from the basic-head-mod-phrase-simple found in Matrix.tdl. To the original implementation of basic-head-mod-phrase-simple we added an identification between the MC (main clause) values of the mother and non-head-dtr (the modifier), as well as an identification between the L-PERIPH value of the HEAD-DTR and the NON-HEAD-DTR.  This was done by adding the following lines to PG.tdl.

basic-head-mod-phrase-simple :+ 
   [ SYNSEM.LOCAL.CAT.MC #mc,  
     NON-HEAD-DTR.SYNSEM.LOCAL.CAT [ HEAD.MOD < [ L-PERIPH #periph ] >,
				     MC #mc ],
     HEAD-DTR.SYNSEM.L-PERIPH #periph ].

Our gug-scopal-mod-phrase inherits from head-final so we get the correct left-attaching behavior from our modifiers, and from head-compositional so the syntactic head daughter is correctly identified as the semantic head.  The output of our rule is MC na so that it is required to through decl-cl before unifying with the root. For now (until we have evidence to the contrary from our source data) we have set the values of EC and IC to negative so this phrase does not appear in embedded or interrogative clauses, and its QUE, SLASH, and YNQ features are all set to empty.  

gug-scopal-mod-phrase := basic-head-mod-phrase-simple & head-final & 
			 head-compositional &
  [ SYNSEM [ LOCAL.CAT [ MC na,                       
			 EC -,                        
			 IC -],
	     NON-LOCAL [ QUE <! !>, 
			 SLASH <! !>, 
			 YNQ <! !> ]],
    HEAD-DTR.SYNSEM.LOCAL.CAT [ MC na,
                                HEAD verb & [MOD < >],
                                VAL [ SPEC < >, 
                                      SPR < >, 
                                      SUBJ < >, 
                                      COMPS < > ]],
    NON-HEAD-DTR.SYNSEM.LOCAL [ CAT [ HEAD adv & 
					   [ MOD < [ LOCAL scopal-mod ] >],
                                      VAL [SPEC < >,
					   SPR < >, 
					   SUBJ < >, 
					   COMPS < > ]],
                                      CONT.HOOK #hook ],
    C-CONT [ HOOK #hook,
	     HCONS <! !>,
	     ICONS <! !> ] ]. 

Additionally, the rule requires a fully satisfied head daughter that is [MC na] and [MOD < >].  It’s non-head daughter has empty valence features and should be HEAD adv (which at this point only our scopal modifiers are). Its MOD value requires modify a constituent with a [LOCAL scopal-mod] value, and its CONT.HOOK value is identified with the C-CONT.HOOK of the rule itself.   

This was a particularly satisfying rule to work with since we were able to take it from spinning, to hundreds of parses to just the ones we want. 

— Adding Say

We followed your suggestion and implemented say as a transitive verb, so that in our corpus example we get semantics similar to “Juanchi says it.”  This was implemented straightforwardly by adding the following entry to our lexicon:

e := trans-verb-lex &
  [ STEM <"e">,
    SYNSEM.LKEYS.KEYREL.PRED "_say_v_rel"]. 


- Implementing Proper Nouns

Although our source glossed the name “Juanchi” as “Juan” + diminutive “chi,”  with your permission we have (gratefully) opted to treat this as a name equivalent to the Spanish name “Juanito” which is constructed in a similar fashion.  This meant that we just needed to add a lexical type for proper names which we did by adding the following to PG.tdl,

 



3. Wh-Questions



4. Anything else.

5. Statement of the current overage of the grammar over your testsuite (using number you can get from Analyze|Coverage and Analyze|Overgeneration in [incr tsdb()]) and a comparison between your baseline testsuite run and your final one for this lab (see Compare|Competence).

--General Stats

Analyze | Coverage
	Total Items: 202
	Positive Items: 129 
	Word String 0: 2.88
	Lexical Items 0: 4.49
	Distinct Analyses: 2.71
	Total Results: 102
	Overall Coverage: 79.1

Analyze | Overgeneration
	Total Items: 202
	Negative Items: 73
	Word String 0: 2.95
	Lexical Items 0: 4.49
	Distinct Analyses: 3.71
	Total Results: 7
	Overall Coverage: 9.6

Comparison of baseline(gold-lab5) and final version of this lab 
(Compare | Competence)

	Baseline
		lexical 0:  1.33
		analyses 0: 1.34
		in 0:       66.7
		out 0:      1.4

	New
		lexical 0:  1.46
		analyses 0: 2.77
		in 0:       79.1
		out 0:      9.6

The comparison between the baseline and this week’s grammar show that we were able to increase the coverage from 66.7% to 79.1%. This is an obvious result as we were able to deal with some grammar phenomena in our testsuite which were not solved with our previous grammar. On the other side we see that we have a significant increase in the overgeneration from 1.4% to 9.6%. The explanation for these results in our test suite are discussed in further detail in the next lines. 
We found nine illformed sentences:

#9: This sentence illustrates the wrong use of a PP as a modifier, as the PP is placed at the beginning of the sentence, although its MOD element should be to the left. The sentence could not parse before, because the appositions were not specified in the lexicon of our grammar. Now the grammar can read it and confirms it is ungrammatical.

#Ex.9: Wrong order for PP moodifier. 
Source: author
Vetted: f
Judgment: u
Phenomena: adp
lo nNakyrandi ajeroky avatitýpe
lo nNakyra ndi ajeroky avatityA pe
lo nNakyra=ndi a-jeroky avatityA=pe
the.PL crickets=with 1SG.3-dance cornfield=in
*'I dance in the cornfield with the crickets'


#109: This sentence was thought to be ungrammatical as it illustrates a possessive construction with a possessum that cannot be possessed (wind). As we implemented noun predicates this week (especially zero-copula), the grammar is generating in alternative parses each noun as a separate noun predicate, which conjoins other nouns in a juxtaposition of individual predicates. This combination allows for the amount of generation found here. This phenomenon is often present in this week’s results, and we might find it at different places, specially when there is a use of several common nouns in a sentence. 

#Ex.109: Ungrammatically possessed 'unpossessable' noun.
Source: author
Vetted: f
Judgment: u
Phenomena: poss
ahendu avatitý yvytu hata 
ahendu avatityA yvytu hata 
a-hendu avatityA yvytu hata
A.1SG-hear cornfield wind.INAM strong
'I hear the cornfield's strong wind'


#116/117/120: These sentences represent the wrong use of the question clitic, which should be placed in second position. The sentences were not processed previously, because yes-no-questions and its clitics did not exist in the grammar. The grammar is able to offer us other readings which were unexpected. Several of the new parses are the result of the same phenomenon previously described.

#Ex.116: Yes-No question with question marker in wrong position, should be second position.
Source: c
Vetted: f
Judgment: u
Phenomena: q
ohecha ñakyrapa vakápe? 
ohecha nNakyra pa vakaA pe
o-hecha nNakyra=pa vakaA=pe
O.3-see cricket.ANIM.NOM=Q cow.ANIM=ACC
*'Did the cricket see the cow?

#Ex.117: Yes-No question with question marker in wrong position, should be second position.
Source: c
Vetted: f
Judgment: u
Phenomena: q
ohecha ñakyra vakápepa? 
ohecha nNakyra vakaA pe pa
o-hecha nNakyra vakaA=pe=pa
O.3-see cricket.ANIM.NOM cow.ANIM=ACC=Q
*'Did the cricket see the cow?

#Ex.120: Yes-No question with focus marker on verb predicate, and use of marker piko
Source: c
Vetted: f
Judgment: u
Phenomena: {q, wo}
ohecha ñakyra  vakápe piko? 
ohecha nNakyra vakaA pe piko
o-hecha nNakyra vakaA=pe piko
O.3-see cricket.ANIM.NOM cow.ANIM=ACC Q
*'Did the cricket see the cow?


#118: This sentence was also previously not read by our grammar, because it belongs to the group of yes-no-questions. The grammar confirm it is now ungrammatical, as the accusative marker =pe should be postponed inside the NP and not after the question clitic.

#Ex.118: Yes-No question with question marker in wrong position, should be end suffix.
Source: c
Vetted: f
Judgment: u
Phenomena: q
vakápape ohecha ñakyra? 
vakaA pa pe ohecha nNakyra
vakaA=pa=pe o-hecha nNakyra
cow.ANIM=Q=ACC O.3-see cricket.ANIM.NOM
*'Was it the cricket, who saw the cow?'

#119: This sentence was previously not read by the grammar as it has the question clitic =piko, not present in the lexicon of lab5. Now that the lexicon and the yes-no-question phenomenon is understood by the grammar and confirmed as ungrammatical.

#Ex.119: Yes-No question with focus marker on verb predicate, wrong position of marker piko
Source: c
Vetted: f
Judgment: u
Phenomena: {q, wo}
piko ohecha ñakyra  vakápe? 
piko ohecha nNakyra vakaA pe
piko o-hecha nNakyra vakaA=pe
Q O.3-see cricket.ANIM.NOM cow.ANIM=ACC
*'Did the cricket see the cow?


#152: This sentence demonstrates the wrong use of an adverb, which should be positioned after the predicates it modifies. The adverb is shown here at the end of the sentence, and our understanding was that this is ungrammatical. We see here again the generation of parses through coordination of bare-np predicates. Nevertheless, we take the verdict of our parses, and as we are suspicious of the use of an adverb in such a way, start thinking about what we can do better next time. 

#Ex.152: Adverb should come directly after the verb predicate with no intervening words.
Source: b
Vetted: f
Judgment: u
Phenomena: adv
jagua osuHu vakaApe vai
jagua osuHu vakaA pe vai
jagua o-suHu vakaA=pe vai
dog A.3-bite cow.ANIM=ACC bad
*'the dog bit the cow in an ugly way' 

#185: In the previous grammar, this sentence represented the wrong use of possessives in a juxtaposition of individual nouns. Especially, a noun with a possessor (chesy - ‘my mother’) cannot be possessed again. This week’s grammar implementation though counts both nouns(dog and mother) as independent bare-np nouns with their own predication. Therefore grammatical from that perspective.

#Ex.185:  Nouns that have passed through the possessive lexical rule should not be allowed to be the possessums of other nouns. 
Source: author
Vetted: f
Judgment: u
Phenomena: poss
jagua chesy
jagua chesy
dog che-sy
dog 1SG.POS-mother
*'There is a my mother of the dog'


As for the changes in the wellformed sentences, we detect similar trends. There are 62 sentences that show some changes in the parses:
14 of those are sentences that represent lexicon and phenomena not previously illustrated in our grammar. While some of those sentences got just one new parse, several other had a broader ambiguity in their parses. In an extreme example, a sentence which was simply not parsing (because the phenomenon was not properly illustrated in the grammar) generated now 12 different parses. This sentence (#202) has some ambiguity embedded because the verb arguments do not show their accusative or nominative cases, and also because two consecutive nouns can be interpreted as a complex noun (possessive). Additionally, the main clauses can be declarative or interrogative in their expression. Nevertheless, the phenomenon of bare-np and juxtaposition of predicates visits us here as well, and generates some additional parses.   

#Ex.202: Embedding of interrogative clause
Source: e
Vetted: f
Judgment: g
Phenomena: emb-d
aikuua ohechaha ju'i vakaA
aikuua ohecha ha juHi vakaA
a-ikuua o-hecha=ha juHi vakaA
A.1SG-know A.3-see=COMPL frog cow
'I know that somebody sees the frog's cow' / ' I know that the frog's cow sees it' / 'I know that the frog sees the cow' / 'I know that the cow sees the frog'


All the other sentences had an increase of their total amount of parses. The number of parses doubles, or even quadruples in some cases. This correlates strongly with the number of nouns present in the sentence. 

As the juxtaposition rule and bare-np creation seem to be natural occurrences in PG, we respect the results offered here, although have some doubts that the same parses exist in such an exuberance in the natural use of PG.  We think that this generation of additional parses makes our analysis of other parses more opaque. During analysis we tended to comment out the coordination rules in order to find parses more strongly related to our phenomena or even the ‘wrong’ parses. While pragmatically there could be situations that could make use of the different interpretations offered by the coordination rules, we think that we should limit the scope of how they must be reviewed in detail, as they are mostly based on simple phenomena.

