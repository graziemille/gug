# 567 LAB7
# LANGUAGE: gug / Paraguayan Guaraní
# AUTHOR: Lisa Tittle Caballero
# PARTNER: Thor Wicke Monteverde



1. One Sentence Fromm Test Corpus

Last week we were able to parse sentence #20

#Sentence.20
Source: a, attested
Vetted: t
Judgment: g
Phenomena: corpus
Ha he'i Huanchi:
ha  oeHi   Juanchi
ha  o-eHi  Juanchi
and A.3-say Juan.DIM
'And Juanito says:'

This week we decided to build on that work by parsing sentence #22

#Sentence.22
Source: a, attested
Vetted: t
Judgment: g
Phenomena: corpus
Ha he'i Pirulo-pe
Ha oeHi Pirulo pe 
Ha o-eHi Pirulo=pe 
and A.3-say Pirulo=DAT
'and he said to Pirulo'


As we discussed on GoPost, implementing this sentence involved required us to: 
1. Implement ditransitives (finally!), including defining the new type and making sure appropriate inflection applied, 2. changing our implementation of case-marking adpositions so that we have separate entries for accusative and dative version of the postposition PE, only one of which is optional. 3. Making the appropriate changes to the lexicon.


- DITRANSITIVES

—— INFLECTION
Even though they have three arguments, ditransitive verb predicates (DVPs) in PG are inflected with the same prefixes as our transitive verbs. The prefixes, which our authors refer to as co-referential markers, can co-reference either the subject or the direct object (DO) of a verb.  Subjects and DOs are co-referenced with different sets of markers, which (following the conventions in our reference grammars) we refer to as A-markers and O-markers respectively.  Whether a verb receives A- or O- marking depends on its arguments’ positions in a person hierarchy. First person arguments outrank second person arguments which outrank third person arguments. If both arguments have the same person designation an A-marker is used. This gives us patterns like those below:


#Ex.70: Transitive verb with 3PER object agrees with 1SG subject. Subject drop. 
Source: author
Vetted: f
Judgment: g
Phenomena: {pro-d, agr, pn}
ahecha vakápe
ahecha vakaA pe
a-hecha vakaA=pe
A.1SG-see cow.ANIM=ACC
‘I see the cow'

#Ex.71: Transitive verb with 3PER object agrees with 2SG subject. Subject drop. 
Source: author
Vetted: f
Judgment: g
Phenomena: {pro-d, agr, pn}
rehecha vakápe
rehecha vakaA pe
re-hecha vakaA=pe
A.2SG-see cow.ANIM=ACC
‘You see the cow'

#Ex.72: Transitive verb agrees with 3PER object agrees with 3PER subject. Subject drop. 
Source: author
Vetted: f
Judgment: g
Phenomena: {pro-d, agr, pn}
ohecha vakápe
ohecha vakaA pe
o-hecha vakaA=pe
A.3-see cow.ANIM=ACC
'He sees the cow'

#Ex.73: Transitive verb with 3PER subject agrees with 1SG object.  Object drop.
Source: author
Vetted: f
Judgment: g
Phenomena: agr
chehecha vaká
chehecha vakaA
che-hecha vakaA
O.1SG-see cow.ANIM
'The cow sees me'

#Ex.74: Transitive verb with 3PER subject agrees with 2SG object. Object drop.
Source: author
Vetted: f
Judgment: g
Phenomena: agr
ndehecha vaká
ndehecha vakaA
nde-hecha vakaA
O.2SG-see cow.ANIM
'The cow sees you'

#Ex.4: Ungrammatical verb agreement with 3per object rather 3per subject.
Source: author
Vetted: f
Judgment: u
Phenomena: agr
ju'i ihecha tunich
juHi ihecha tunich
juHi i-hecha tunich
frog.ANIM O.3-see stone.INAM
*'The frog sees the stone'

The person-ranking of an indirect object (IO) does not affect co-reference marking on the verb, which we can see in Ex.50, where we have a 1st person IO, but the verb agrees with the 2nd person subject because the DO is 3rd person.

#Ex.50: Ditransitive agrees with 2SG subject. Indirect object marked with 1SG dative pronoun. S.V.IO.DO order
Source: author
Vetted: f
Judgment: g
Phenomena: {wo, agr, pn}
nde rehechauka cheve tunich
nde rehechauka cheve tunich
nde re-hecha-uka cheve tunich
2.SG.PRON.NOM A.2SG-see-CAUS 1.SG.PRON.DAT stone.INAM
'You show me the stone'

#Ex.51: Dynamic intransitive agrees with 2SG subject. Indirect object marked with 1SG dative pronoun.
Source: author
Vetted: f
Judgment: g
Phenomena: {wo, agr, pn}
nde rehechauka cheve
nde rehechauka cheve 
nde re-hecha-uka cheve 
2.SG.PRON.NOM A.2SG-see-CAUS 1.SG.PRON.DAT 
'You show it to me'

Also if we remove the direct object as in #51 we only get one parse, even though the pronoun cheve is underspecified between dative and accusative case.  This is because if cheve were an accusative pronoun and the direct object of the verb, the coreference marker would be che- not re-. 

To capture the parallel behavior between transitive and intransitive verbs and make use of the inflectional rules already present in our grammar, we defined a new supertype for transitive and intransitive verbs.  

gug-trans-ditrans-verb := verb-lex &
  [ INFLECTED.PERNUM-TRANS-FLAG - ].

We then created a new ditransitive-verb-lex which inherits from this category (discussed in detail later) and updated our trans-verb-lex to inherit from this new type: 

 transitive-verb-lex := gug-trans-ditrans-verb & transitive-lex-item &
   completive-aspect-or-perfective-aspect-or-prospective-aspect-rule-dtr &
   future-aspect-rule-dtr & neg1-rule-dtr & neg2-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps & [OPT-CS in-foc]>,
    ARG-ST < [ LOCAL.CAT.HEAD +np ],
	       #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
			   HEAD +np ] ] > ]. 

The new supertype inherits from verb-lex and adds a flag feature requiring verbs of this type to go through the pernum-trans-ditrans-lex-rule outlined below to be considered fully inflected: 

pernum-trans-ditrans-lex-rule-super := add-only-no-ccont-rule & completive-aspect-or-perfective-aspect-or-prospective-aspect-rule-dtr & future-aspect-rule-dtr & infl-lex-rule & neg1-rule-dtr & neg2-rule-dtr &
  [ INFLECTED [ PERNUM-DYN-INTRANS-OR-PERNUM-TRANS-FLAG +,
                PERNUM-TRANS-FLAG +,
                PERNUM-DYN-INTRANS-OR-PERNUM-STAT-INTRANS-OR-PERNUM-TRANS-FLAG +,
                NEG1-FLAG #neg1,
                PERNUM-STAT-INTRANS-FLAG #pernum-stat-intrans,
                NEG2-FLAG #neg2 ],
    DTR gug-trans-ditrans-verb &
        [ INFLECTED [ NEG1-FLAG #neg1,
                      PERNUM-STAT-INTRANS-FLAG #pernum-stat-intrans,
                      NEG2-FLAG #neg2 ] ] ].

The linguistic facts of the language outlined above are captured by the individual lexical rule types of this position class which specify subject and object PERNUM values for each type.  For rule types with 1st person subjects there is no need to constrain PERNUM on the object since 1st person subjects will always outrank their objects.

1sg-a-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1sg ].

1sg-a-2sg-o-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1sg,
                           COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2sg ] ].

1sg-a-2pl-o-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1sg,
                           COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2pl ] ].

1sg-o-23-a-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1sg,
                           SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM non-1st ] ].

2sg-a-3-o-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2sg,
                           COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ] ].

2sg-o-3-a-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd,
                           COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2sg ] ].

3-a-3-o-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd,
                           COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ] ].

1pl-incl-a-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1pl_incl ].

1pl-excl-a-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1pl_excl ].

1pl-incl-o-23-a-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1pl_incl,
                           SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM non-1st ] ].

1pl-excl-o-23-a-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1pl_excl,
                           SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM non-1st ] ].

2pl-a-3-o-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2pl,
                           COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ] ].

2pl-o-3-a-lex-rule := pernum-trans-ditrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2pl,
                           SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ] ].

These individual lexical rule types are instantiated in irules.tdl as follows:

1sg-a-prefix :=
%prefix (* a)
1sg-a-lex-rule.

1sg-a-2sg-o-prefix :=
%prefix (* ro)
1sg-a-2sg-o-lex-rule.

1sg-a-2pl-o-prefix :=
%prefix (* po)
1sg-a-2pl-o-lex-rule.

1sg-o-23-a-prefix :=
%prefix (* che)
1sg-o-23-a-lex-rule.

2sg-a-3-o-prefix :=
%prefix (* re)
2sg-a-3-o-lex-rule.

2sg-o-3-a-prefix :=
%prefix (* nde)
2sg-o-3-a-lex-rule.

3-a-3-o-prefix :=
%prefix (* o)
3-a-3-o-lex-rule.

1pl-incl-a-prefix :=
%prefix (* ja)
1pl-incl-a-lex-rule.

1pl-excl-a-prefix :=
%prefix (* ro)
1pl-excl-a-lex-rule.

1pl-incl-o-23-a-prefix :=
%prefix (* nNande)
1pl-incl-o-23-a-lex-rule.

1pl-excl-o-23-a-prefix :=
%prefix (* ore)
1pl-excl-o-23-a-lex-rule.

2pl-a-3-o-prefix :=
%prefix (* pe)
2pl-a-3-o-lex-rule.

2pl-o-3-a-prefix :=
%prefix (* pende)
2pl-o-3-a-lex-rule.


—— Lexical Type
The new lexical type for ditransitives was modeled after the way definition of transitive verbs was produced by the customization system. This model has incorporates some redundancy, but we opted against removing it and instead defined our types as counterparts to the transitive examples shown below:


transitive-verb-lex := gug-trans-ditrans-verb & transitive-lex-item & completive-aspect-or-perfective-aspect-or-prospective-aspect-rule-dtr & future-aspect-rule-dtr & neg1-rule-dtr & neg2-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps & [OPT-CS in-foc]>,
    ARG-ST < [ LOCAL.CAT.HEAD +np ],
	       #comps &
             [ LOCAL.CAT [ HEAD +np,
			   VAL [ SPR < >,
                                 COMPS < > ] ] ] >].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD +np &
                              [ CASE acc ] ] >,
    SYNSEM.LOCAL.CAT.VAL [ SUBJ < [ LOCAL.CAT.HEAD.CASE-MARKED + ] >,
                           COMPS < [ LOCAL.CAT.HEAD.CASE-MARKED + ] > ] ].


trans-verb-lex := nom-acc-transitive-verb-lex.


Following that model we have also outlined three types in an inheritance chain: ditransitive-verb-lex is inherited by nom-acc-dat-ditransitive-verb-lex, which is inherited by ditrans-verb-lex.

The first type, ditransitive-verb-lex inherits from our gug-trans-ditrans-verb supertype and ditransitive-lex-item in matrix.tdl:

ditransitive-verb-lex := gug-trans-ditrans-verb & ditransitive-lex-item & completive-aspect-or-perfective-aspect-or-prospective-aspect-rule-dtr & future-aspect-rule-dtr & neg1-rule-dtr & neg2-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps1 & [OPT-CS in-foc], #comps2 & [OPT-CS in-foc] >,
    ARG-ST < [ LOCAL.CAT.HEAD +np ],
             #comps1 & [ LOCAL.CAT [ VAL [ SPR < >, COMPS < > ],
                                     HEAD +np  ] ],
             #comps2 & [ LOCAL.CAT [ VAL [ SPR < >, COMPS < > ],
                                     HEAD +np  ] ] > ].

ditransitive-lex-item := basic-three-arg-no-hcons & basic-icons-lex-item &
   [ ARG-ST < [ LOCAL.CONT.HOOK [ INDEX ref-ind & #ind1,
				  ICONS-KEY.IARG1 #clause ] ],
	      [ LOCAL.CONT.HOOK [ INDEX ref-ind & #ind2,
				  ICONS-KEY.IARG1 #clause ] ],
	      [ LOCAL.CONT.HOOK [ INDEX ref-ind & #ind3,
				  ICONS-KEY.IARG1 #clause ] ] >,
     SYNSEM [ LKEYS.KEYREL [ ARG1 #ind1,
			     ARG2 #ind2,
			     ARG3 #ind3 ],
	      LOCAL.CONT.HOOK.CLAUSE-KEY #clause ] ].

ditrans-lex-item specifies the length of our type’s ARG list and ensures that we end up with the right semantics. We also inherit from the daughter types of our negation and aspect rules so that verbs of this type can be inflected for aspect and negation. In the body of the rule we specify the length of the type’s COMPS list, and identify those arguments with the last two elements on the ARG list.  Dropped arguments are constrained to be in-foc, all arguments are constrained to be [HEAD +np] (again following the model provided by the customization system), and the elements on the COMPS list are constrained to have empty VAL.COMPS & VAL.SPR values.

Our next type nom-acc-dat-ditransitive-verb-lex inherits from ditransitive-verb-lex and adds information about case.

nom-acc-dat-ditransitive-verb-lex := ditransitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD +np &
                              [ CASE acc ] ],
             [ LOCAL.CAT.HEAD +np &
                              [ CASE dat ] ] >,
    SYNSEM.LOCAL.CAT.VAL [ SUBJ < [ LOCAL.CAT.HEAD.CASE-MARKED + ] >,
                           COMPS < [ LOCAL.CAT.HEAD.CASE-MARKED + ],
                                   [ LOCAL.CAT.HEAD.CASE-MARKED + ] > ] ].

The first argument is constrained to be [CASE nom], the second [CASE acc], the third [CASE DAT].  All the elements on the VAL.SUBJ and VAL.COMPS lists are constrained to be [LOCAL.CAT.HEAD.CASE-MARKED +].  The last two elements on the ARG list are still [HEAD +np] but the first argument is further constrained to be [HEAD noun]. 

Finally ditrans-verb-lex inherits from nom-acc-dat-ditransitive-verb-lex  and is instantiated in the lexicon with the following entries

ditrans-verb-lex := nom-acc-dat-ditransitive-verb-lex.

hechauka := ditrans-verb-lex &
   [STEM<"hechauka">,
    SYNSEM.LKEYS.KEYREL.PRED "_show_v_rel"].

meHeN := ditrans-verb-lex &
   [STEM<"meHeN">,
    SYNSEM.LKEYS.KEYREL.PRED "_give_v_rel"].

eHi := ditrans-verb-lex &
  [ STEM <"eHi">,
    SYNSEM.LKEYS.KEYREL.PRED "_say_v_rel"]. 

—— Phrasal Type

As ditransitive verbs have two COMPS elements, we added a second head-comp/comp-head rule to connect those complements to the head predicate. Because of the free word order in PG, we have head-comp and comp-head versions:


head-comp-phrase-2 := basic-head-2nd-comp-phrase & head-initial-head-nexus  &
 [ SYNSEM.LOCAL.CAT [ HEAD +nvjrcdmo, 
          	      EC #ec,
          	      IC #ic,
                      VAL.COMPS.FIRST.OPT - ], 
   HEAD-DTR.SYNSEM.LOCAL.CAT [ EC #ec,
                               IC #ic ]].

comp-head-phrase-2 := basic-head-2nd-comp-phrase & head-final-head-nexus &
   [ SYNSEM.LOCAL.CAT [	HEAD +nvjrcdmo, 
        		EC #ec,
          		IC #ic,
                      VAL.COMPS.FIRST.OPT - ],  
   NON-HEAD-DTR.SYNSEM.LOCAL.CAT [ EC #ec,
             			   IC #ic ]].

They were already defined in our grammar with the following:

head-comp-phrase-2 := basic-head-2nd-comp-phrase & head-initial-head-nexus.

comp-head-phrase-2 := basic-head-2nd-comp-phrase & head-final-head-nexus.

And in rules.tdl with:

head-comp-2 := head-comp-phrase-2.

comp-head-2 := comp-head-phrase-2.

We expanded them to include and copy up the same features as our first head-comp/comp-head rules. Also, when we first tested the rules we observed that our indirect complement could attach as the first or the second complement when the direct object was dropped, leading to spurious double parses with the same MRS values. We fixed this by adding the constraint [VAL.COMPS.FIRST.OPT -].

So now an unambiguous sentence like #51 parses correctly with just one parse:

#Ex.51: Dynamic intransitive agrees with 2SG subject. Indirect object marked with 1SG dative pronoun.
Source: author
Vetted: f
Judgment: g
Phenomena: {wo, agr, pn}
nde rehechauka cheve
nde rehechauka cheve 
nde re-hecha-uka cheve 
2.SG.PRON.NOM A.2SG-see-CAUS 1.SG.PRON.DAT 
'You show it to me'


— CASE-MARKING ADPOSITIONS
The indirect objects of DVPs are marked with an obligatory dative marker. These arguments can take the form of either a dative pronoun or an NP combined with the case-marking postposition ’pe.’  Because the accusative case-marking adposition shares the same form.  so these were originally instantiated in the lexicon with a single entry that was underspecified between dative and accusative case.   However, the accusative case markers are optional and the dative markers are not, which necessitated creating separate entries instead.  We added the following to lexicon.tdl:

acc-marker := case-marking-adp-lex &
  [ STEM < "pe" >,
    SYNSEM.LOCAL [ CONT [ HOOK [ ICONS-KEY.IARG1 #clause,
                                 CLAUSE-KEY #clause ],
                          ICONS <!  !> ],
                   CAT.HEAD [ CASE ACC,
                              CASE-MARKED + ] ] ].

dat-marker := case-marking-adp-lex &
  [ STEM < "pe" >,
    SYNSEM.LOCAL [ CONT [ HOOK [ ICONS-KEY.IARG1 #clause,
                                 CLAUSE-KEY #clause ],
                          ICONS <!  !> ],
                   CAT.HEAD [ CASE DAT,
                              CASE-MARKED + ] ] ].


And, because these entries are semantically empty, updated trigger.mtr with the following:

acc-marker_gr_1 := arg0e_gtr &
  [ CONTEXT.RELS <! [ ARG1 individual & #i ] !>,
    FLAGS [ SUBSUME < #i >,
            TRIGGER "acc-marker" ] ].

acc-marker_gr_2 := arg0e_gtr &
  [ CONTEXT.RELS <! [ ARG2 individual & #i ] !>,
    FLAGS [ SUBSUME < #i >,
            TRIGGER "acc-marker" ] ].


dat-marker_gr_1 := arg0e_gtr &
  [ CONTEXT.RELS <! [ ARG1 individual & #i ] !>,
    FLAGS [ SUBSUME < #i >,
            TRIGGER "dat-marker" ] ].

dat-marker_gr_2 := arg0e_gtr &
  [ CONTEXT.RELS <! [ ARG2 individual & #i ] !>,
    FLAGS [ SUBSUME < #i >,
            TRIGGER "dat-marker" ] ].

dat-marker_gr_3 := arg0e_gtr &
  [ CONTEXT.RELS <! [ ARG3 individual & #i ] !>,
    FLAGS [ SUBSUME < #i >,
            TRIGGER "dat-marker" ] ].


As the dative 'pe' is obligatory, but the accusative 'pe' optional, nouns were generally
classified as having CASE non-dat. If a verb predicate needs a dative argument, this is handled through unification with the case marker 'pe' dative, which no longer identifies its case with that of its complement.  To implement this the case hierarchy was changed to include the type non-dat:

case := *top*. 
non-nom := case.
non-dat := case.
nom := non-dat.
dat := non-nom.
acc := non-nom & non-dat.
loc := non-nom & non-dat.

common-noun-lex was constrained to [CASE non-dat], and case-marking-adp-lex was updated so that there is no longer an identification between its case and the case of the noun complement it unifies with (which by default would be non-dat). 

common-noun-lex := noun-lex & 
  [ SYNSEM.LOCAL[ CAT.HEAD.CASE non-dat,
                  CONT.HOOK.INDEX.PNG.PERNUM 3rd ]].


case-marking-adp-lex :=  basic-one-arg & raise-sem-lex-item &
  [ SYNSEM.LOCAL.CAT [  EC - , 
                        IC - , 
                        HEAD adp &
                            [ MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comps >,
                             SPEC < > ] ],
    ARG-ST < #comps &
             [ LOCAL.CAT [ VAL.SPR < >,
                           HEAD noun &
              		   [ CASE-MARKED - ] ] ] > ].
 
CASE-MARKED is defined as a property of +np head-types with the following in PG.tdl

+np :+ [ CASE case,
         CASE-MARKED bool].

The [CASE-MARKED -] restriction on the complement of our case-marking-adp-lex prevents unification with pronoun complements, which are constrained in the following way:

pron-nom-noun-lex := pron-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE nom,
                            CASE-MARKED + ] ].

pron-nonagent-noun-lex := pron-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE non-nom,
                            CASE-MARKED + ] ]. 

bare-np-phrase inherits from basic-bare-np-phrase which inherits from head-only in matrix.tdl which has the following identification between it’s HEAD-DTR and ARGS:

head-only := unary-phrase & headed-phrase &
  [ HEAD-DTR #head,
    ARGS < #head > ].

So we didn’t have to do any additional work to allow for arguments that have gone through the bare-np-rule.


— ADDITIONAL CHANGES TO THE LEXICON

Since we defined proper nouns last week, adding Pirulo was simple.  We just added the following new entry to lexicon.tdl:

	Pirulo := proper-noun-lex &	
	  [ STEM < “Pirulo” >,
	    SYNSEM.LKEYS.KEYREL.CARG “Pirulo” ].

Which inherits from our proper-noun-lex defined in PG.tdl:

	proper-noun-lex := non-poss-com-noun-lex & no-spr-noun-lex & com-anim-noun-lex & 
			   named-relation.

Also, as alluded to above, we updated our entry for eHi so that instead of instantiating trans-verb-lex, it instantiates ditrans-verb-lex:

	eHi := ditrans-verb-lex &
	  [ STEM <"eHi">,
	    SYNSEM.LKEYS.KEYREL.PRED "_say_v_rel"]. 


— END STATE
  
Our new sentence now parses with our target semantics. We also get one additional parse, with the meaning “He said Pirulo to someone,” because the accusative marker is also written as ‘pe,’ and in our free word order language, this makes #22 ambiguous.  

#Sentence.22
Source: a, attested
Vetted: t
Judgment: g
Phenomena: corpus
Ha he'i Pirulo-pe
Ha oeHi Pirulo pe 
Ha o-eHi Pirulo=pe 
and A.3-say Pirulo=DAT
'and he said to Pirulo'

We are able to generate from both of our parses. When we generate from the tree where =pe is identified as an accusative marker we get four parses: both Verb/Argument orders, each with a pe-marked and non-pe-marked option.  When we generate from the tree where =pe is identified as a dative marker, we correctly get only two parses: ‘ha Pirulo pe oeHi,’ and ‘ha oeHi Pirulo pe.’  


2. Changes to semi.vpm

— SF

SF : SF
  prop <> prop
  ques <> ques
  prop-or-ques >> prop-or-ques 
  prop << prop-or-ques
  comm <> comm
  prop-or-ques << [e]
  * <> *

Initially or semi.vpm had the following line ‘prop-or-ques <> prop-or-ques’ which led us to get question variants of sentences without overt question marking, so the English sentence “Dogs sleep” generated Guarani sentences like “oike piko jagua”  All of the sentences with question particles were well formed and correspond to sentences like "Was it sleep, that the dogs did?"  and "Was it the dogs that slept?"   But we decided it would be better require sentences to be overtly marked as questions in a source language to get overt marks of questions in our language.  We did this by replacing the initial equivalency with a line ‘prop << prop-or-ques’ changing incoming prop-or-ques values to prop, and the line ‘prop-or-ques >> prop-or-ques’ which preserves the prop-or-ques value going out. We also added the line  ‘prop-or-ques << [e]’ assigning incoming event types with unlisted or undefined SF values the default value of prop-or-ques.   We did not assign a default SF to underspecified event types in Guarani, because we have set up our grammar to require all well-formed sentence to have non-under-specified SF value (more on this later.). 

- COG-ST

COG-ST : COG-ST
  type-id <> type-id
  uniq-id <> uniq-id
  familiar <> familiar
  activated <> activated
  in-foc <> in-foc
  activ+fam <> activ+fam
  uniq+fam <> uniq+fam
  activ-or-more <> activ-or-more
  uniq-or-less <> uniq-or-less
  uniq+fam+act <> uniq+fam+act
  fam-or-more <> fam-or-more
  fam-or-less <> fam-or-less
  uniq-or-more <> uniq-or-more
  activ-or-less <> activ-or-less
  * >> type-id
  * <> *

Our grammars were very clear that cog-st values for common nouns are underspecified in Guarani, but to cut down generation, which, in a free word order language can already be pretty robust, we decided to add the line  * >> type-id.  This cuts down our generation from sentence like “jagua oguata,” “(the)dogs walk” from 4 to 2. We feel doing this is helpful, since, as it is, a sentence like our old standby “juHi ohecha vakaA” with the MRS the corresponding to “the frog sees the cow” still generates 12 parses, all well-formed.
We left the catch all ‘* <> *’ line at the end to allow underspecified or other COG-ST to remain underspecified in Guarani.


—PERNUM

Guarani uses a PERNUM feature which, using the DELPHIN wiki for guidance, I mapped out to PER and NUM features in the following way. 

PNG.PERNUM : PER NUM
  1sg <> first sg
  2sg <> second sg
  3sg <> third sg
  1pl <> first pl
  1pl_incl <> first_incl pl
  1pl_excl <> first_excl pl
  2pl <> second pl
  3pl <> third pl
  1st <> first !
  1st << first *
  2nd <> second !
  2nd << second *
  3rd <> third !
  3rd << third *
  sg <> ! sg
  sg << * sg
  pl <> ! pl
  pl << * pl
  * >> ! !
  ! << * *


I also took this opportunity to fix the our naming of PERNUM types grammar-internally.  We had been using capitalized names, but that is now fixed both the here and in all the relevant places in our grammar.  Side note: We had a similar capitalization issue with our CASE types, which we also fixed in grammar-internally this week, but is of course not relevant to semi.vpm.

—TENSE

E.TENSE : TENSE
  ! << [e]
  [e] >> !
  * <> *

Since tense is not relevant to Guarani, semi.vpm now explicitly states that we ignore all tense information coming in and output no tense information.  I left the catch-all at the end, though it is technically no longer necessary. 

—ASPECT

As set out in the lab instructions, I defined no-aspect in PG.tdl:

;;; Aspect

no-aspect := aspect.
perfective := aspect.
completive := aspect.
future := aspect.
prospective := aspect.
future-completive := future & completive.
future-perfective := future & perfective.

I used ‘* >> no-aspect’ and ‘no-aspect << [e],’  to set default value for events with underspecified aspect to be no-aspect and assign that same value to events from a source language that have either underspecified aspect or an aspect that is not in our current inventory.

E.ASPECT : ASPECT
  future-perfective <> future-perfective
  perfective <> perfective
  future-completive <> future-completive
  completive <> completive
  future-completive <> future-completive
  future-perfective <> future-perfective
  future <> future
  prospective <> prospective
  * >> no-aspect
  no-aspect << [e] 

—MOOD

E.MOOD : MOOD
  * >> mood
  mood << [e]

Mood is also not relevant for our current grammar. In this instance I copied the notations used in semi.vpm for the English grammar we are working with this week.  Rather than using the same notation I used to deal with tense. 

- GENDER

I initially dealt with gender mismatches with the following.

PNG.GEND : GEND
  hum <> hum
  inam <> inam
  anim <> anim
  * << [p]
  * << !
  * <> *

But following the comments in class, I just deleted the section entirely and MT still works.


3. First MT

Machine translation is working! 





4. More improvements to the grammar

—UPDATES FROM LAST WEEK

We are now defining ‘-eHi’ as a ditransitive verb in the lexicon, but because dative marking is obligatory for indirect objects, Juanchi can only be the subject or direct object of the predicate in 20—which is the same ambiguity we saw last week when ‘-eHi’ was instantiated as a transitive verb. 

#Sentence.20
Source: a, attested
Vetted: t
Judgment: g
Phenomena: corpus
Ha he'i Huanchi:
ha  oeHi   Juanchi
ha  o-eHi  Juanchi
and A.3-say Juan.DIM
'And Juanito says:'

Also, last week when we generated from these parses we got a lot of sentences.  Some of this generation was well-formed and due to the fact that we had not specified a default for underspecified aspect values. But generating from our coordinated examples also generated a lot of options with ‘pa’ and ‘piko,’ e.g. ‘ha oeHi ha Juanchi piko.’ With changes made to semi.vpm and our coordination rules (described below) we have managed to get some really well behaved generation. 





5. Statement of the current overage of the grammar over your testsuite (using number you can get from Analyze|Coverage and Analyze|Overgeneration in [incr tsdb()]) and a comparison between your baseline testsuite run and your final one for this lab (see Compare|Competence).

—Corpus Stats

Analyze | Coverage
	Total Items: 21
	Positive Items: 21
	Word String 0: 6.14
	Lexical Items 0: 6.00
	Distinct Analyses: 3.00
	Total Results: 1
	Overall Coverage: 4.8

Analyze | Overgeneration
	Total Items: 0
	Negative Items: 0
	Word String 0: 0
	Lexical Items 0: 0
	Distinct Analyses: 0 
	Total Results: 0
	Overall Coverage: 100

Comparison of baseline(gold-lab6) and final version of this lab 
(Compare | Competence)

	Baseline
		lexical 0:  .38
		analyses 0: 0.0
		in 0:       0.0
		out 0:      100.0

	New
		lexical 0:  .53
		analyses 0: 3.00
		in 0:       4.8
		out 0:      100.0

We have achieved our goal of parsing one more sentence from our corpus this week:

#Sentence.20
Source: a, attested
Vetted: t
Judgment: g
Phenomena: corpus
Ha he'i Huanchi:
ha  oe   Juanchi
ha  o-e  Juanchi
and A.3-say Juan.DIM
'And Juanito says:'

Which as noted earlier in the write-up is correctly parsing with three possible readings. 


--TestSuite General Stats

Analyze | Coverage
	Total Items: 211
	Positive Items: 138
	Word String 0: 2.99
	Lexical Items 0: 4.84
	Distinct Analyses: 2.96
	Total Results: 113
	Overall Coverage: 81.9

Analyze | Overgeneration
	Total Items: 211
	Negative Items: 73
	Word String 0: 2.97
	Lexical Items 0: 4.68
	Distinct Analyses: 1.00
	Total Results: 1
	Overall Coverage: 1.4

Comparison of baseline(gold-lab6) and final version of this lab 
(Compare | Competence)

	Baseline
		lexical 0:  1.46
		analyses 0: 2.76
		in 0:       76.8
		out 0:      6.8

	New
		lexical 0:  1.52
		analyses 0: 2.94
		in 0:       81.9
		out 0:      1.4


General analysis

We see an increase in coverage over our testsuite from 76.8 to 81.9.  A lot of that jump is in our analysis of longer sentences (i-length in [5-10|) where our performance jumped from 60.9 to 78.3.  The jump in shorter sentences was more modest from 80.0 to 82.6.  

We also see an increase in the number of distinct analyses with our new grammar, but this is actually to be expected for two reasons.  First, fixing our n-bar-predicate rule resulted in a lot more legitimate ambiguity, and second, as noted above we are parsing a larger percentage of our long sentences which in Guarani tend to have larger numbers of legitimate parses.

One example is 202, seen below, where we have 4 legitimate parses even without accounting for asyndenton coordination which interacts with the n-bar-predicate rule to produce 6 more. That said we were still able to constrain coordination a bit more and reduce the number of parses on that sentence by 2 even with the changes this week, from 12 to 10 total.

#Ex.202: Embedding of interrogative clause
Source: e
Vetted: f
Judgment: g
Phenomena: emb-d
aikuua ohechaha ju'i vakaA
aikuua ohecha ha juHi vakaA
a-ikuua o-hecha=ha juHi vakaA
A.1SG-know A.3-see=COMPL frog cow
'I know that somebody sees the frog's cow' / ' I know that the frog's cow sees it' / 'I know that the frog sees the cow' / 'I know that the cow sees the frog'

Even short sentences can be multiply ambiguous, particularly when we have to NP’s next to each other as we see in 193.  Here we can have the frog seeing the cow, the cow seeing the frog, the frog’s cow being seen, or the frog’s cow seeing something.  For these types of sentences we generally saw an increase in parses from 8-10, with the 2 extra parses attributed to the aforementioned changes to our n-bar-predicate rule and the interaction between it and coordination.  

#Ex.193 Transitive verb agrees with 3per subject. No marking on animate object. VSO word order. No determiners, underspecified number. Ambiguous.
Source: author
Vetted: f
Judgment: g
Phenomena: wo
ohecha ju'i vaká
ohecha juHi vakaA
o-hecha juHi vakaA
O.3-see frog.ANIM.NOM cow.ANIM
'The frogs see the cows'

In Ex. 162 the additional ambiguity is the result of new lexical ambiguity.  We have a new scopal-modifier with the form “ha” which is also the form of complementizer clitic AND the form used for conjunction.  The ambiguity between scopal modifier and conjunction leads to increase the readings from 4 to 8 but all the readings look reasonable. 

#Ex.162: Use of 'and' coordination with nominal constituents
Source: author
Vetted: f
Judgment: g
Phenomena: {crd, wo}
aguara ha jagua okañy
aguara ha jagua okanNy
aguara ha jagua o-kanNy
fox.ANIM.NOM and dog.ANIM.NOM A.3-hide
'the fox and the dog hid'

As a further frame of reference we also compared our results to our grammar from this Thursday, after we had made some major changes but before we had managed to patch many of our leaks. Thursday’s grammar was showing 3.89 analyses on average with a 6.45 average for longer sentences, which were able to get down to 2.94 and 3.44 respectively.

In particular 201 and 202, which you may remember as being the sentences with 17 and 20 parses respectively now have only 10 distinct analyses each, which as you can see from my breakdown of 202 above is actually a reasonable number for sentences of this length particularly when there are to NPs in a row.

#Ex.201: Embedding of interrogative clause
Source: e
Vetted: f
Judgment: g
Phenomena: emb-q
aporandu ohechapa ju'i vakaA
aporandu ohecha pa juHi vakaA
a-porandu o-hecha=pa juHi vakaA
A.1SG-ask A.3-see=Q frog cow
'I ask if somebody sees the frog's cow'/ ' I ask if the frog's cow sees it' / 'I ask if the frog sees the cow' / 'I ask if the cow sees the frog'

#Ex.202: Embedding of interrogative clause
Source: e
Vetted: f
Judgment: g
Phenomena: emb-d
aikuua ohechaha ju'i vakaA
aikuua ohecha ha juHi vakaA
a-ikuua o-hecha=ha juHi vakaA
A.1SG-know A.3-see=COMPL frog cow
'I know that somebody sees the frog's cow' / ' I know that the frog's cow sees it' / 'I know that the frog sees the cow' / 'I know that the cow sees the frog'

Adding some additional constraints to our head-adj-int rule reduced the parses on sentences like 22 and 26 by about half, from 9 to 5 in the first case and from 13 to 6 in the second. Furthermore the parses that remain look legitimate.

#Ex.22 Transitive verb agrees with 3per subject. Accusative marking on animate object. SVO word order. No determiners, underspecified number.
Source: author
Vetted: f
Judgment: g
Phenomena: {wo, agr, c}
ju'i ohecha vakápe
juHi ohecha vakaA pe
juHi o-hecha vakaA=pe
frog.ANIM.NOM O,3-see cow.ANIM=ACC
'The frogs sees the cows'

#Ex.26: Transitive verb agrees with 3per subject. Accusative marking on animate object. VSO word order. No determiners, underspecified number.
Source: author
Vetted: f
Judgment: g
Phenomena: {wo, agr, c}
ohecha ju'i vakápe
ohecha juHi vakaA pe
o-hecha juHi vakaA=pe
A.3-see frog.ANIM.NOM cow.ANIM=ACC
'The frog sees the cow'


Our ill-formed sentence is the same example as in previous weeks were we have not yet encoded that “hand” has to have a possessor or possessive marking, and cannot occur with a  determiner like la/lo. That should be easy to handle with what we have in place so we will likely get to that next week. We are also hoping to tackle ditransitives for next week which should reduce our number of errors significantly.  


——Details 

—Intersection between readings and MRS

When we look at the intersection between readings and differences in MRS we see some really interesting changes that further complicate the results above.  There are many examples (over 15) where there are no readings in common. This is even true many distinct analyses available for both weeks. For example sentence 202 which we looked at above had 12 parses last week and has 10 this week, but NONE of those readings overlap. 

Our simple go-to sentence ‘juhi ohecha tunich’ has the two traditional readings in common with last week, “the frog sees the stone” and the “the stone sees the frog”  but the semantics for all of our coordinated results are different which shows the effect of not loosing our semantics, which was happening because non-local information was not getting passed up through our coordination rules. 

#Ex.3:  Transitive verb. 3Per subject verb agreement. Inanimate object.
Source: author
Vetted: f
Judgment: g
Phenomena: {wo, agr, c}
ju'i ohecha tunich
juHi ohecha tunich
juHi o-hecha tunich
frog.ANIM A.3-see stone.INAM
'The frog sees the stone' / 'The stone sees the frog' 

Sentence 186 went from 4 to 6 readings, with 0 in common. 5 of those parses involve coordination, so the lack of overlap is expected given the problem outlined above, but it also tells me we weren’t getting the semantics right for the target reading of “my mother’s dog walks” either.    

#Ex.186: Possessive affixation combined with possessive phrase rule. 
Source: author
Vetted: f
Judgment: g
Phenomena: poss
chesy jagua oguata
chesy jagua oguata
che-sy jagua o-guata
1SG.POS-mother dog A.3-walk
'My mother's dog walks' 

Finally we can see the effects of the corrected n-bar-predicate rule in the semantics #195, which had one reading for both grammars but with different semantics:

#Ex.195: NP predicate, possessive marking
Source: author
Vetted: f
Judgment: g
Phenomena: cop
hi'ára
iaAra
i-aAra
POSS.3-day
'It is his/her day' 
