;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Paraguayan_Guarani
;;; created at:
;;;     Sat Jan 30 04:38:38 UTC 2016
;;; based on Matrix customization system version of:
;;;     Sun Jan 10 22:56:48 UTC 2016
;;;
;;; LING 567 - Lab 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list, Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;


+np :+ [ CASE case,
         CASE-MARKED bool].

inflected :+ [ PERNUM-STAT-INTRANS-FLAG luk,
    NEG1-FLAG luk,
    PERNUM-DYN-INTRANS-OR-PERNUM-TRANS-FLAG luk,
    NEG2-FLAG luk,
    PERNUM-DYN-INTRANS-OR-PERNUM-STAT-INTRANS-OR-PERNUM-TRANS-FLAG luk,
    PERNUM-TRANS-FLAG luk ].

infl-satisfied :+ [ PERNUM-STAT-INTRANS-FLAG na-or-+,
    NEG1-FLAG na-or-+,
    PERNUM-DYN-INTRANS-OR-PERNUM-TRANS-FLAG na-or-+,
    NEG2-FLAG na-or-+,
    PERNUM-DYN-INTRANS-OR-PERNUM-STAT-INTRANS-OR-PERNUM-TRANS-FLAG na-or-+,
    PERNUM-TRANS-FLAG na-or-+ ].

png :+ [ PERNUM pernum,
    GEND gender ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc].

basic-head-subj-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc].

basic-head-mod-phrase-simple :+ 
   [ SYNSEM.LOCAL.CAT.MC #mc,  
     NON-HEAD-DTR.SYNSEM.LOCAL.CAT [ HEAD.MOD < [ L-PERIPH #periph ] >,
				     MC #mc ],
     HEAD-DTR.SYNSEM.L-PERIPH #periph ].

;trying to reduce redundancy caused by multiple attachment sites 
;and head-subj/subj-head. Additional modifications made to head-subj subj-head below

nonolist := list.
nonocons := nonolist & cons &
  [ FIRST [ OPT - ],
    REST  nonolist ].
nononull := nonolist & null.

; We can't just use the V-final and V-initial word
; order modules together to get a good free word order
; module. The root of the problem seems to be that we
; need the subject to be able to attach inside the
; object(s) for VSO and OSV, but at the same time, we
; don't want complete flexibility on order of attachment
; when the verb is in the middle -- that would give
; spurious ambiguity.  This solution adopts the xmod
; hierarchy to enforce right-first attachment.  That is,
; all arguments appears to the right of the verb must
; attach before all arguments appearing to the left.  The
; linguistic prediction of this analysis is that free
; word order languages do not have a consistent VP
; consituent, even when the verb and object are adjacent
; (OV order).  Using a separate feature for tracking
; argument attachment (as opposed to modifier
; attachment).  We might be able to collapse these one
; day, but that's not obvious.

synsem :+ [ ATTACH xmod ].

; We'll need to add identification of ATTACH between
; mother and head-daughter for all other kinds of phrases
; if we do this.  Just for illustration, I'm putting it
; in for head-adjunct phrases here:

head-mod-phrase :+ [ SYNSEM.ATTACH #attach,
    HEAD-DTR.SYNSEM.ATTACH #attach ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
NOM := case.  ; NOM
non-NOM := case.
DAT := non-NOM.
ACC := non-NOM.
LOC := non-NOM.

;;; Pernum

pernum := *top*.
SG := pernum.
PL := pernum.
1st := pernum.
1SG := 1st & SG.
2SG := 2nd & SG.
3SG := 3rd & SG.
1PL := 1st & PL.
1PL_incl := 1PL.
1PL_excl := 1PL.
2PL := 2nd & PL.
3PL := 3rd & PL.
non-1st := pernum.
3rd := non-1st.
2nd := non-1st.

;;; Gender

gender := *top*.
anim := gender.
inam := gender.
hum := anim.

;;; Aspect

perfective := aspect.
completive := aspect.
future := aspect.
prospective := aspect.
future-completive := future & completive.
future-perfective := future & perfective.

;;; POSS Feature to distinguish nouns can can have a possessor or not in possessive constructions
;;; through the juxtaposition rule

noun:+ [POSS poss].

poss := *top*.
non-poss := poss.
poss-or-ee := poss.
poss-or := poss-or-ee.
poss-ee := poss-or-ee.



; Add Feature for semantics of YNQ

non-local :+ [ YNQ 0-1-dlist ].

non-ynq-word := lex-item &
  [ SYNSEM.NON-LOCAL.YNQ 0-dlist ].
basic-zero-arg :+ [ SYNSEM.NON-LOCAL.YNQ 0-dlist ].
basic-one-arg :+ [ SYNSEM.NON-LOCAL.YNQ 0-dlist ].
basic-two-arg :+ [ SYNSEM.NON-LOCAL.YNQ 0-dlist ].
basic-three-arg :+ [ SYNSEM.NON-LOCAL.YNQ 0-dlist ].
intersective-mod-lex :+ [ SYNSEM.NON-LOCAL.YNQ 0-dlist ].

; Feature for embedded clauses (declarative)


cat :+ [EC bool, IC bool].


;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

;; subtype added to deal with nouns that cannot be possessed.

non-poss-com-noun-inam-lex := com-inam-noun-lex & 
        [SYNSEM.LOCAL.CAT.HEAD.POSS poss-or].

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT [  EC -, 
                        IC -,
                        VAL [ SPR < #spr &
                                    [ LOCAL.CAT.HEAD det ] >,
                              COMPS < >,
                              SUBJ < >,
                              SPEC < > ]],
    ARG-ST < #spr > ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.


common-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ].

com-anim-noun-lex := common-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND anim ].

com-inam-noun-lex := common-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND inam ].

pron-noun-lex := no-spr-noun-lex &
      [SYNSEM [ MODIFIED hasmod,
                LOCAL [CAT.HEAD.POSS non-poss,
                     CONT.HOOK.INDEX [COG-ST activ-or-more, SPECI +]]]].

1sg-pron-nom-noun-lex := pron-nom-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1SG ].

2sg-pron-nom-noun-lex := pron-nom-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2SG ].

3sg-pron-nom-noun-lex := pron-nom-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3SG ].

1pl-incl-pron-nom-noun-lex := pron-nom-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1PL_incl ].

1pl-excl-pron-nom-noun-lex := pron-nom-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1PL_excl ].

2pl-pron-nom-noun-lex := pron-nom-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2PL ].

3pl-pron-nom-noun-lex := pron-nom-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3PL ].

pron-nom-noun-lex := pron-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE NOM,
                            CASE-MARKED + ] ].

pron-nonagent-noun-lex := pron-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE non-NOM,
                            CASE-MARKED + ] ].

1sg-pron-nonag-noun-lex := pron-nonagent-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1SG ].

2sg-pron-nonag-noun-lex := pron-nonagent-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2SG ].

3sg-pron-nonag-noun-lex := pron-nonagent-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3SG ].

1pl-incl-pron-nonag-noun-lex := pron-nonagent-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1PL_incl ].

1pl-excl-pron-nonag-noun-lex := pron-nonagent-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1PL_excl ].

2pl-pron-nonag-noun-lex := pron-nonagent-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2PL ].

3pl-pron-nonag-noun-lex := pron-nonagent-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3PL ].

com-anim-human-noun-lex := com-anim-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND hum ].


;; Wh-pronoun lexeme
; Changed PNG.PER to PNG.PERNUM

wh-pronoun-noun-lex := norm-hook-lex-item & basic-icons-lex-item & 
  [ SYNSEM [ LOCAL [ CAT [ HEAD noun,
			   VAL [ SPR < >,
				 SUBJ < >,
				 COMPS < >,
				 SPEC < > ] ],
		     CONT [ HOOK.INDEX.PNG.PERNUM 3rd,
	                    RELS < ! [ LBL #larg,
				       ARG0 #ind & ref-ind ],
				  [ PRED "wh_q_rel",
				    ARG0 #ind,
				    RSTR #harg ] ! >,
			    HCONS < ! [ HARG #harg,
				        LARG #larg ] ! > ] ],
	     NON-LOCAL.QUE < ! #ind ! > ] ].




;;; Verbs

;;New supertype replacing inheritance from verb-lex for both locative-verb-lex and dynamic-intransitive verb lex and ensuring that both these categories of verbs pass through the verb appropriate verb inflection rule

gug-dyn-loc-verb := verb-lex & 
[ INFLECTED.PERNUM-DYN-INTRANS-OR-PERNUM-TRANS-FLAG - ].

;; New verb type for attaching locative PP's
locative-verb-lex := gug-dyn-loc-verb & trans-first-arg-control-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SUBJ < #subj >,
                             COMPS < #comps >,
                             SPR < >,
                             SPEC < >   ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CONT.HOOK.INDEX #xarg,
                       CAT [ HEAD noun, 
                             VAL [ SPR < >,
                                   COMPS < > ],
                             HEAD noun ] ] ],
             #comps &
             [ OPT -,
               LOCAL.CAT [ VAL [ COMPS < > ],
                           HEAD adp & [CASE LOC] ] ] > ].


verb-lex := basic-verb-lex & non-mod-lex-item &
  [ SYNSEM.LOCAL [ CAT [ MC na,
			 VAL [ SPR < >,
                             SPEC < >,
                             SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ],
    INFLECTED [ NEG1-FLAG na-or--,
                PERNUM-DYN-INTRANS-OR-PERNUM-STAT-INTRANS-OR-PERNUM-TRANS-FLAG na-or-- ] ].

;;had to remove verb-lex from the path here, because the two intransitive verb subtypes need to inherit this seperately
intransitive-verb-lex := intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD +np ].

transitive-verb-lex := verb-lex & transitive-lex-item & completive-aspect-or-perfective-aspect-or-prospective-aspect-rule-dtr & future-aspect-rule-dtr & neg1-rule-dtr & neg2-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps & [OPT-CS in-foc]>,
    ARG-ST < [ LOCAL.CAT.HEAD +np ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD +np ] ] >,
    INFLECTED.PERNUM-TRANS-FLAG - ].

;;Attempt for ditransitive-verb-lex

;ditransitive-verb-lex := verb-lex & ditransitive-lex-item & completive-aspect-or-perfective-aspect-or-prospective-aspect-rule-dtr & future-aspect-rule-dtr & neg1-rule-dtr & neg2-rule-dtr &
;  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps & [OPT-CS in-foc]>,
;    ARG-ST < [ LOCAL.CAT.HEAD +np ],
;             #comps &
;             [ LOCAL.CAT [ VAL [ SPR < >,
;                                 COMPS < > ],
;                           HEAD +np ] ] >,
;    INFLECTED.PERNUM-TRANS-FLAG - ].


NOM-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE NOM ],
    SYNSEM.LOCAL.CAT.VAL.SUBJ < [ LOCAL.CAT.HEAD.CASE-MARKED + ] > ].

NOM-ACC-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE NOM ] ],
             [ LOCAL.CAT.HEAD +np &
                              [ CASE ACC ] ] >,
    SYNSEM.LOCAL.CAT.VAL [ SUBJ < [ LOCAL.CAT.HEAD.CASE-MARKED + ] >,
                           COMPS < [ LOCAL.CAT.HEAD.CASE-MARKED + ] > ] ].

trans-verb-lex := NOM-ACC-transitive-verb-lex.

intrans-verb-lex := NOM-intransitive-verb-lex.

;;has to inherit from verb-lex directly
stative-intrans-verb-lex := verb-lex & intrans-verb-lex & completive-aspect-or-perfective-aspect-or-prospective-aspect-rule-dtr & future-aspect-rule-dtr & neg1-rule-dtr & neg2-rule-dtr &
  [ INFLECTED.PERNUM-STAT-INTRANS-FLAG - ].

;;inherits from verb lex via gug-dyn-loc-verb 
dynamic-intrans-verb-lex := gug-dyn-loc-verb & intrans-verb-lex & completive-aspect-or-perfective-aspect-or-prospective-aspect-rule-dtr & future-aspect-rule-dtr & neg1-rule-dtr & neg2-rule-dtr.


;;Adding clause complement verb lexemes


cl-verb-lex:= gug-dyn-loc-verb &  clausal-second-arg-trans-lex-item &
    [SYNSEM.LOCAL.CAT.VAL.COMPS <#comps>,
     ARG-ST.REST.FIRST #comps].

int-cl-verb-lex:= cl-verb-lex &
    [SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT [ IC +,
                                                  HEAD verb,
					                                        VAL [ COMPS < >, 
                                                  SUBJ < > ] ],
					                                  CONT.HOOK.INDEX.SF ques ]]>].

decl-cl-verb-lex:= cl-verb-lex &
    [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT [ EC +,
                                                   IC -,
 					                                         HEAD verb,
					                                         VAL.COMPS < > ],
					                                   CONT.HOOK.INDEX.SF prop ]]>].


;;; Adjectives

adj-lex := gug-intersective-adjective-lex.

gug-intersective-adjective-lex := basic-adjective-lex &
  [ SYNSEM [ LOCAL.CONT.HOOK.XARG event-or-ref-index & #xarg,
           LKEYS.KEYREL.ARG1 #xarg ] ].

attributive-adj-lex := attr-only-adj-lex &
  [ SYNSEM.LOCAL.CAT [ POSTHEAD +,
                       HEAD.MOD < [ LIGHT +,
                                    MODIFIED notmod ] > ] ].

; Basic attributive adjective definition

;Commented out to test what happens when HEAD noun restriction is removed
;attr-adj-lex := adj-lex & intersective-mod-lex &
;  [ SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT [ HEAD noun,
;                                              VAL.SPR cons ] ] > ].

attr-adj-lex := adj-lex & intersective-mod-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT [ HEAD +nv ] ] > ].


attr-only-adj-lex := attr-adj-lex &
  [ SYNSEM.LOCAL.CAT [ HEAD.PRD -,
                       VAL.SUBJ < > ] ].

;;; Others

;;; Case-marking adpositions
;;; Case marking adpositions are constrained not to
;;; be modifiers.


case-marking-adp-lex :=  basic-one-arg & raise-sem-lex-item &
  [ SYNSEM.LOCAL.CAT [  EC - , 
                        IC - , 
                        HEAD adp &
                            [ CASE #case,
                               MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comps >,
                             SPEC < > ] ],
    ARG-ST < #comps &
             [ LOCAL.CAT [ VAL.SPR < >,
                           HEAD noun &
                                [ CASE #case,
                                  CASE-MARKED - ] ] ] > ].

contentful-adp-lex := basic-int-mod-adposition-lex
  [ SYNSEM.LOCAL.CAT [  EC - , 
                        IC - ,
                        HEAD adp & [CASE LOC,
                                 MOD <[ LOCAL.CAT[ MC na, 
                                                   HEAD verb,
                                                   VAL [SUBJ < >]],
                                        L-PERIPH +] > ],
                       VAL [ SPR < >,
                             COMPS < #comps >,
                             SPEC < >, 
                             SUBJ < > ]  ],
    ARG-ST < #comps & [ OPT -,
                        LOCAL.CAT[ HEAD +np,
                                   VAL [SPR < >] ] ] > ].

; Lexical type for question marks
; adding non-empty YNQ value

question-clitic-lex := no-hcons-lex-item &
 [ SYNSEM [ LOCAL [ CAT [ IC +, 
                          VAL [ SPR < >, COMPS < >, SUBJ < >, SPEC < >],
                          HEAD adj & [ MOD < [ LIGHT +,
                                               L-PERIPH +,
				                                       LOCAL intersective-mod] > ]],
                                               CONT.RELS <! !> ],
            NON-LOCAL.YNQ <! *top* !>  ]].

compl-clitic-lex := no-hcons-lex-item &
 [ SYNSEM [ LOCAL [ CAT [ IC -, 
                          EC +,
                          VAL [ SPR < >, COMPS < >, SUBJ < >, SPEC < >],
                          HEAD adj & [ MOD < [LOCAL.CAT.HEAD verb,
                                              LIGHT +,
                                              L-PERIPH +,
                                              LOCAL intersective-mod ] > ]],
                    CONT.RELS <! !> ]]].

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & basic-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                             SUBJ < >,
         SPEC<[LOCAL.CONT.HOOK.INDEX.COG-ST uniq+fam+act]>]].

def-sg-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM SG ].

def-pl-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM PL ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Intermediate rule types

future-aspect-rule-dtr := word-or-lexrule.
completive-aspect-or-perfective-aspect-or-prospective-aspect-rule-dtr := word-or-lexrule.
neg1-rule-dtr := word-or-lexrule.
neg2-rule-dtr := word-or-lexrule.

;;; Lexical rule types

;;rule that takes in nouns and updates their PRED value so that they can take part in the n-bar-predicate rule

pred-noun-lex-rule-super := constant-lex-rule & neg1-rule-dtr & neg2-rule-dtr & 
  [SYNSEM.LOCAL.CAT.HEAD noun & [PRD +],
   DTR common-noun-lex ].


;; The possessive lexical rule as possessive affixes to possessums
;; e.g., chesy, che-sy, "my mother"
poss-lex-rule-super := infl-add-only-lex-rule &
	[SYNSEM.LKEYS.ALTKEYREL #altkeyrel,
	DTR common-noun-lex & [ SYNSEM.LOCAL [ CONT.HOOK [  INDEX #index,  
              LTOP #lbl  ] ,
            CAT [ HEAD.POSS poss-or ,
            VAL.SPR <[OPT +]> ] ]],  
	C-CONT [ HOOK [INDEX #index, 
            LTOP #lbl  ],
  	RELS <! arg12-ev-relation &
          [ PRED "poss_rel",
            LBL #lbl,
            ARG1 #index,
            ARG2 #arg2 ],
          quant-relation &
          [PRED "exist_q_rep",
           ARG0 #arg2,
           RSTR #harg ],
          #altkeyrel & noun-relation &
            [PRED "pron_rel",
             LBL #lbl2,
             ARG0 #arg2 & [ COG-ST activ-or-more,
                SPECI + ] ] !>, 
  	HCONS <! qeq & [ HARG #harg, 
       			LARG #lbl2 ] !>,
  	ICONS <! !>] ].

1sg-poss-lex-rule := poss-lex-rule-super &
  [ SYNSEM.LKEYS.ALTKEYREL.ARG0.PNG.PERNUM 1SG ].

2sg-poss-lex-rule := poss-lex-rule-super &
  [ SYNSEM.LKEYS.ALTKEYREL.ARG0.PNG.PERNUM 2SG ].

3-poss-lex-rule := poss-lex-rule-super &
  [ SYNSEM.LKEYS.ALTKEYREL.ARG0.PNG.PERNUM 3rd ].

1pl-incl-poss-lex-rule := poss-lex-rule-super &
  [ SYNSEM.LKEYS.ALTKEYREL.ARG0.PNG.PERNUM 1PL_incl ].

1pl-excl-poss-lex-rule := poss-lex-rule-super &
  [ SYNSEM.LKEYS.ALTKEYREL.ARG0.PNG.PERNUM 1PL_excl ].

2PL-poss-lex-rule := poss-lex-rule-super &
  [ SYNSEM.LKEYS.ALTKEYREL.ARG0.PNG.PERNUM 2PL ].

pernum-trans-lex-rule-super := add-only-no-ccont-rule & completive-aspect-or-perfective-aspect-or-prospective-aspect-rule-dtr & future-aspect-rule-dtr & infl-lex-rule & neg1-rule-dtr & neg2-rule-dtr &
  [ INFLECTED [ PERNUM-DYN-INTRANS-OR-PERNUM-TRANS-FLAG +,
                PERNUM-TRANS-FLAG +,
                PERNUM-DYN-INTRANS-OR-PERNUM-STAT-INTRANS-OR-PERNUM-TRANS-FLAG +,
                NEG1-FLAG #neg1,
                PERNUM-STAT-INTRANS-FLAG #pernum-stat-intrans,
                NEG2-FLAG #neg2 ],
    DTR trans-verb-lex &
        [ INFLECTED [ NEG1-FLAG #neg1,
                      PERNUM-STAT-INTRANS-FLAG #pernum-stat-intrans,
                      NEG2-FLAG #neg2 ] ] ].

1sg-a-lex-rule := pernum-trans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1SG ].

1sg-a-2sg-o-lex-rule := pernum-trans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1SG,
                           COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2SG ] ].

1sg-a-2pl-o-lex-rule := pernum-trans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1SG,
                           COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2PL ] ].

1sg-o-23-a-lex-rule := pernum-trans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1SG,
                           SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM non-1st ] ].

2sg-a-3-o-lex-rule := pernum-trans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2SG,
                           COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ] ].

2sg-o-3-a-lex-rule := pernum-trans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2SG,
                           COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ] ].

3-a-3-o-lex-rule := pernum-trans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd,
                           COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ] ].

1pl-incl-a-lex-rule := pernum-trans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1PL_incl ].

1pl-excl-a-lex-rule := pernum-trans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1PL_excl ].

1pl-incl-o-23-a-lex-rule := pernum-trans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1PL_incl,
                           SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM non-1st ] ].

1pl-excl-o-23-a-lex-rule := pernum-trans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1PL_excl,
                           SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM non-1st ] ].

2pl-a-3-o-lex-rule := pernum-trans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2PL,
                           COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ] ].

2pl-o-3-a-lex-rule := pernum-trans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2PL,
                           SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ] ].

neg1-lex-rule-super := cont-change-only-lex-rule & infl-lex-rule & neg2-rule-dtr &
  [ INFLECTED [ NEG1-FLAG +,
                NEG2-FLAG -,
                PERNUM-DYN-INTRANS-OR-PERNUM-TRANS-FLAG #pernum-dyn-intrans-or-pernum-trans,
                PERNUM-STAT-INTRANS-FLAG #pernum-stat-intrans,
                PERNUM-DYN-INTRANS-OR-PERNUM-STAT-INTRANS-OR-PERNUM-TRANS-FLAG #pernum-dyn-intrans-or-pernum-stat-intrans-or-pernum-trans,
                PERNUM-TRANS-FLAG #pernum-trans ],
    DTR neg1-rule-dtr &
        [ INFLECTED [ PERNUM-DYN-INTRANS-OR-PERNUM-TRANS-FLAG #pernum-dyn-intrans-or-pernum-trans,
                      PERNUM-STAT-INTRANS-FLAG #pernum-stat-intrans,
                      PERNUM-DYN-INTRANS-OR-PERNUM-STAT-INTRANS-OR-PERNUM-TRANS-FLAG #pernum-dyn-intrans-or-pernum-stat-intrans-or-pernum-trans,
                      PERNUM-TRANS-FLAG #pernum-trans ] ] ].

; This adds negative semantics to the verb's
; RELS list.

prefix-neg-lex-rule := neg1-lex-rule-super &
  [ C-CONT [ HOOK [ XARG #xarg,
                    LTOP #ltop,
                    INDEX #ind ],
             RELS <! event-relation &
                     [ PRED "neg_rel",
                       LBL #ltop,
                       ARG1 #harg ] !>,
             HCONS <! qeq &
                      [ HARG #harg,
                        LARG #larg ] !> ],
    SYNSEM.LKEYS #lkeys,
    DTR.SYNSEM [ LKEYS #lkeys,
                 LOCAL [ CONT.HOOK [ XARG #xarg,
                                     INDEX #ind,
                                     LTOP #larg ],
                         CAT.HEAD verb ] ] ].

neg2-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ NEG2-FLAG +,
                NEG1-FLAG #neg1,
                PERNUM-DYN-INTRANS-OR-PERNUM-TRANS-FLAG #pernum-dyn-intrans-or-pernum-trans,
                PERNUM-STAT-INTRANS-FLAG #pernum-stat-intrans,
                PERNUM-DYN-INTRANS-OR-PERNUM-STAT-INTRANS-OR-PERNUM-TRANS-FLAG #pernum-dyn-intrans-or-pernum-stat-intrans-or-pernum-trans,
                PERNUM-TRANS-FLAG #pernum-trans ],
    DTR neg2-rule-dtr &
        [ INFLECTED [ NEG1-FLAG #neg1 & +,
                      PERNUM-DYN-INTRANS-OR-PERNUM-TRANS-FLAG #pernum-dyn-intrans-or-pernum-trans,
                      PERNUM-STAT-INTRANS-FLAG #pernum-stat-intrans,
                      PERNUM-DYN-INTRANS-OR-PERNUM-STAT-INTRANS-OR-PERNUM-TRANS-FLAG #pernum-dyn-intrans-or-pernum-stat-intrans-or-pernum-trans,
                      PERNUM-TRANS-FLAG #pernum-trans ] ] ].

suffix-neg-lex-rule := neg2-lex-rule-super.

suffix-fut-neg-lex-rule := neg2-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT future ].

future-aspect-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR future-aspect-rule-dtr &
        [ INFLECTED #infl ] ].

fut-asp-lex-rule := future-aspect-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT future ].

completive-aspect-lex-rule-super := add-only-no-ccont-rule & future-aspect-rule-dtr & infl-lex-rule & neg1-rule-dtr & neg2-rule-dtr &
  [ INFLECTED #infl,
    DTR completive-aspect-or-perfective-aspect-or-prospective-aspect-rule-dtr &
        [ INFLECTED #infl &
                    [ PERNUM-DYN-INTRANS-OR-PERNUM-STAT-INTRANS-OR-PERNUM-TRANS-FLAG + ] ] ].

comp-asp-lex-rule := completive-aspect-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT completive ].

perfective-aspect-lex-rule-super := add-only-no-ccont-rule & future-aspect-rule-dtr & infl-lex-rule & neg1-rule-dtr & neg2-rule-dtr &
  [ INFLECTED #infl,
    DTR completive-aspect-or-perfective-aspect-or-prospective-aspect-rule-dtr &
        [ INFLECTED #infl &
                    [ PERNUM-DYN-INTRANS-OR-PERNUM-STAT-INTRANS-OR-PERNUM-TRANS-FLAG + ] ] ].

perf-asp-lex-rule := perfective-aspect-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT perfective ].

pernum-dyn-intrans-lex-rule-super := add-only-no-ccont-rule & completive-aspect-or-perfective-aspect-or-prospective-aspect-rule-dtr & future-aspect-rule-dtr & infl-lex-rule & neg1-rule-dtr & neg2-rule-dtr &
  [ INFLECTED [ PERNUM-DYN-INTRANS-OR-PERNUM-TRANS-FLAG +,
                PERNUM-DYN-INTRANS-OR-PERNUM-STAT-INTRANS-OR-PERNUM-TRANS-FLAG +,
                NEG1-FLAG #neg1,
                PERNUM-STAT-INTRANS-FLAG #pernum-stat-intrans,
                NEG2-FLAG #neg2,
                PERNUM-TRANS-FLAG #pernum-trans ],
    DTR gug-dyn-loc-verb &
        [ INFLECTED [ NEG1-FLAG #neg1,
                      PERNUM-STAT-INTRANS-FLAG #pernum-stat-intrans,
                      NEG2-FLAG #neg2,
                      PERNUM-TRANS-FLAG #pernum-trans ] ] ].

1sg-dyn-intr-lex-rule := pernum-dyn-intrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1SG ].

2sg-dyn-intr-lex-rule := pernum-dyn-intrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2SG ].

3-dyn-intr-lex-rule := pernum-dyn-intrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ].

1pl-incl-dyn-intr-lex-rule := pernum-dyn-intrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1PL_incl ].

1pl-excl-dyn-intr-lex-rule := pernum-dyn-intrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1PL_excl ].

2pl-dyn-intr-lex-rule := pernum-dyn-intrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2PL ].

pernum-stat-intrans-lex-rule-super := add-only-no-ccont-rule & completive-aspect-or-perfective-aspect-or-prospective-aspect-rule-dtr & future-aspect-rule-dtr & infl-lex-rule & neg1-rule-dtr & neg2-rule-dtr &
  [ INFLECTED [ PERNUM-STAT-INTRANS-FLAG +,
                PERNUM-DYN-INTRANS-OR-PERNUM-STAT-INTRANS-OR-PERNUM-TRANS-FLAG +,
                PERNUM-DYN-INTRANS-OR-PERNUM-TRANS-FLAG #pernum-dyn-intrans-or-pernum-trans,
                NEG1-FLAG #neg1,
                NEG2-FLAG #neg2,
                PERNUM-TRANS-FLAG #pernum-trans ],
    DTR stative-intrans-verb-lex &
        [ INFLECTED [ PERNUM-DYN-INTRANS-OR-PERNUM-TRANS-FLAG #pernum-dyn-intrans-or-pernum-trans,
                      NEG1-FLAG #neg1,
                      NEG2-FLAG #neg2,
                      PERNUM-TRANS-FLAG #pernum-trans ] ] ].

1sg-stat-intr-lex-rule := pernum-stat-intrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1SG ].

2sg-stat-intr-lex-rule := pernum-stat-intrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2SG ].

3-stat-intr-lex-rule := pernum-stat-intrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ].

1pl-incl-stat-intr-lex-rule := pernum-stat-intrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1PL_incl ].

1pl-excl-stat-intr-lex-rule := pernum-stat-intrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1PL_excl ].

2pl-stat-intr-lex-rule := pernum-stat-intrans-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2PL ].

prospective-aspect-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & neg1-rule-dtr & neg2-rule-dtr &
  [ INFLECTED #infl,
    DTR completive-aspect-or-perfective-aspect-or-prospective-aspect-rule-dtr &
        [ INFLECTED #infl &
                    [ PERNUM-DYN-INTRANS-OR-PERNUM-STAT-INTRANS-OR-PERNUM-TRANS-FLAG + ] ] ].

pros-asp-lex-rule := prospective-aspect-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT prospective ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;


head-adj-int-phrase :+ [SYNSEM.LOCAL.CAT.MC na].

head-spec-phrase := basic-head-spec-phrase & head-final & 
  [ SYNSEM.LOCAL.CAT [ EC #ec,
                       IC #ic], 
    ARG-STR.FIRST.LOCAL.CAT [ EC #ec,
                              IC #ic ],
    NON-HEAD-DTR.SYNSEM.OPT - ].


;; Allows us to generate NP predicates with no copula or morphology.
n-bar-predicate-rule := unary-phrase & nocoord &
  [ SYNSEM.LOCAL [ AGR #agr3,
                   CAT [  EC -, IC -, MC na,
                          HEAD verb & [MOD < >],
                          VAL [ SPEC < >,
                                SPR  < >,
                                COMPS < >,
           SUBJ < > ] ]],
    C-CONT [ HOOK [ LTOP #ltop,
        INDEX #index],
       RELS <! arg12-ev-relation &
       [ PRED "_be_v_id_rel",
         LBL #ltop,
         ARG0 #index,
         ARG2 #arg2 ],
       quant-relation &
       [ PRED "exist_q_rel",
         ARG0 #arg2,
         RSTR #harg ] !>,
       HCONS <! qeq & [ HARG #harg, LARG #larg ] !> ],
    ARGS < [ SYNSEM.LOCAL [ AGR #agr3,
                            CAT [ HEAD noun & [POSS poss-or-ee],
                                  VAL.SPR cons ],
          CONT.HOOK [ INDEX #arg2,
          LTOP #larg ]]] > ].

;; Special rule for the unary distribution of L-PERIPH in int-cl and decl-cl

basic-unary-int-decl-cl-phrase := phrase &
  [ STEM #stem,
    SYNSEM [
	     LOCAL [ CAT.MKG #mkg,
		     CONT [ RELS [ LIST #first,
				   LAST #last ],
			    HCONS [ LIST #scfirst,
				    LAST #sclast ],
			    ICONS [ LIST #icfirst,
				    LAST #iclast ] ] ] ],
    C-CONT [ RELS [ LIST #middle,
		    LAST #last ],
	     HCONS [ LIST #scmiddle,
		     LAST #sclast ],
	     ICONS [ LIST #icmiddle,
		     LAST #iclast ] ],
    ARGS < sign & [ STEM #stem,
		    SYNSEM [
			     LOCAL local &
			      [ CAT.MKG #mkg,
				CONT [ RELS [ LIST #first,
					      LAST #middle ],
				       HCONS [ LIST #scfirst,
					       LAST #scmiddle ],
				       ICONS [ LIST #icfirst,
					       LAST #icmiddle ] ] ] ] ] > ].
unary-int-decl-cl-phrase := basic-unary-int-decl-cl-phrase &
  [ INFLECTED infl-satisfied,
    ARGS < [ INFLECTED infl-satisfied ] > ].

head-only-int-decl-clause := unary-int-decl-cl-phrase & headed-phrase &
  [ HEAD-DTR #head,
    ARGS < #head > ].



;; ading int and decl clauses 


int-cl := head-only-int-decl-clause & interrogative-clause &
  [ SYNSEM [ LOCAL.CAT [ VAL #val & [SUBJ< >, COMPS< >, SPR< >], MC bool, IC #ic],
             NON-LOCAL.YNQ <! !> ],
    HEAD-DTR.SYNSEM [ LOCAL.CAT [ IC +, MC na, VAL #val, HEAD verb, IC #ic],
                    NON-LOCAL[YNQ <! *top* !>, QUE < !! > ]]].



decl-cl := head-only-int-decl-clause & declarative-clause & 
  [ SYNSEM.LOCAL.CAT [ VAL #val & [SUBJ< >, COMPS< >, SPR< >], MC bool, EC #ec, IC #ic],
    HEAD-DTR.SYNSEM [ LOCAL.CAT [ MC na, VAL #val, HEAD verb, EC #ec, IC #ic],
                     NON-LOCAL.YNQ 0-dlist ]].


s-coord-phrase :+
  [ SYNSEM.LOCAL.CAT [ MC bool, EC #ec, IC #ic],
    LCOORD-DTR.SYNSEM.LOCAL.CAT [ MC bool, EC #ec,  IC #ic],
    RCOORD-DTR.SYNSEM.LOCAL.CAT [ MC bool, EC #ec,  IC #ic]].

s-bottom-coord-phrase :+
  [ SYNSEM.LOCAL.CAT[ MC bool, EC #ec, IC #ic ],
    NONCONJ-DTR.SYNSEM.LOCAL.CAT [ MC bool, EC #ec, IC #ic ] ].


;; Adding L-PERIPH to basic rules so they get percolated with [L-PERIPH] to the right
;; Adding constrain for YNQ


basic-binary-phrase:+
 [ SYNSEM [ L-PERIPH #periph,
            NON-LOCAL.YNQ [ LIST #list, LAST #last ] ],
   ARGS < [ SYNSEM [ L-PERIPH #periph,
                     NON-LOCAL.YNQ [ LIST #list, LAST #middle ] ] ],
          [ SYNSEM [ L-PERIPH -,
                     NON-LOCAL.YNQ [ LIST #middle, LAST #last ] ] ] > ].

; constraining other head headed phrases to produce MC na mothers and
; take MC na head daughters. 

mc-na-headed-phrase := headed-phrase &
  [ SYNSEM.LOCAL.CAT.MC na,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC na ].

same-ec-unary-phrase := headed-phrase &
  [ SYNSEM.LOCAL.CAT [ EC #ec,
                       IC #ic],
    HEAD-DTR.SYNSEM.LOCAL.CAT [ EC #ec,
                               IC #ic] ].

same-periph-unary-phrase := unary-phrase.


same-ynq-unary-phrase := unary-phrase &
  [ SYNSEM.NON-LOCAL.YNQ #ynq,
    ARGS < [ SYNSEM.NON-LOCAL.YNQ #ynq ] > ].

basic-head-opt-subj-phrase:+ YNQ-contrains-phrase &
    [ SYNSEM.LOCAL.CAT [EC #ec,
                        IC #ic  ],
     ARGS < [ SYNSEM.LOCAL.CAT [ EC #ec,
                                 IC #ic ] ]> ].

head-adj-int-phrase :+ 
    [ SYNSEM.LOCAL.CAT [ EC #ec, 
                         IC #ic ],
     NON-HEAD-DTR.SYNSEM.LOCAL.CAT [ EC #ec,
                                      IC #ic ]].

YNQ-contrains-phrase := same-periph-unary-phrase & same-ynq-unary-phrase & 
			mc-na-headed-phrase & same-ec-unary-phrase.

;;Changing the lightness value of basic-head-opt-comp so that we don't
;;get spurious ambiguity when modifiers attach to transitive verbs with
;;dropped subjects
;;adding constrains related to YNQ

gug-head-opt-comp-phrase := basic-head-opt-comp-phrase & YNQ-contrains-phrase &
  			[ SYNSEM.LIGHT -].


;basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT [ EC #ec, 
;                                               IC #ic ],
;                            HEAD-DTR.SYNSEM.LOCAL.CAT [EC #ec,
;                                                       IC #ic ]].

;basic-head-subj-phrase :+ [ SYNSEM.LOCAL.CAT [ EC #ec, 
;                                               IC #ic ],
;                            HEAD-DTR.SYNSEM.LOCAL.CAT [EC #ec,
;                                                       IC #ic ]].

basic-head-opt-comp-phrase :+
 [ SYNSEM [ L-PERIPH #periph,
            LOCAL.CAT [ EC #ec,
                        IC #ic ]],
            ARGS < [ SYNSEM [ L-PERIPH #periph, 
                              LOCAL.CAT [ EC #ec,
                                          IC #ic  ] ] ] > ].
 
trans-verb-lex:+ [SYNSEM.LOCAL.CAT [EC -,
                                    IC -]].
intrans-verb-lex: + [SYNSEM.LOCAL.CAT [EC -,
                                       IC - ]].


 
;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-initial-head-nexus := head-initial &
  [ SYNSEM.ATTACH lmod,
    HEAD-DTR.SYNSEM.ATTACH notmod-or-lmod ].

head-final-head-nexus := head-final &
  [ SYNSEM.ATTACH rmod ].

; constrains related to YNQ



;intermediate type added to force order of rule application between
;Basic-Head-OPT-COMP and any head-subj / subj-head rules

gug-head-subj-phrase := decl-head-subj-phrase &
        [ SYNSEM.LOCAL.CAT.VAL [COMPS nonolist] ].

head-subj-phrase := gug-head-subj-phrase & head-initial-head-nexus &
                    [ SYNSEM.LOCAL.CAT [ EC #ec, 
                                         IC #ic ],
                      HEAD-DTR.SYNSEM.LOCAL.CAT [EC #ec,
                                                 IC #ic ]].


subj-head-phrase := gug-head-subj-phrase & head-final-head-nexus &
                    [ SYNSEM.LOCAL.CAT [ EC #ec, 
                                         IC #ic ],
                      NON-HEAD-DTR.SYNSEM.LOCAL.CAT [EC #ec,
                                                     IC #ic ]].

; The head of head-comp-phrase can't be: ['adp']

head-comp-phrase := basic-head-1st-comp-phrase & head-initial-head-nexus &
                   [ SYNSEM.LOCAL.CAT[ HEAD +nvjrcdmo, 
                                       EC #ec,
                                       IC #ic ], 
                     HEAD-DTR.SYNSEM.LOCAL.CAT [EC #ec,
                                                IC #ic ]].
   

comp-head-phrase := basic-head-1st-comp-phrase & head-final-head-nexus & 
                   [ SYNSEM.LOCAL.CAT[ EC #ec,
                                       IC #ic ], 
                     NON-HEAD-DTR.SYNSEM.LOCAL.CAT [EC #ec,
                                                IC #ic ]].

head-comp-phrase-2 := basic-head-2nd-comp-phrase & head-initial-head-nexus.

comp-head-phrase-2 := basic-head-2nd-comp-phrase & head-final-head-nexus.


; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.
; adding constrains related to YNQ

bare-np-phrase := basic-bare-np-phrase & YNQ-contrains-phrase &
  [ SYNSEM.LIGHT -,
    C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 2


np2-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

np2-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

np2-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 2

vp2-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

vp2-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

vp2-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 2

s2-top-coord-rule := basic-s-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

s2-mid-coord-rule := basic-s-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

s2-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 3

s3-top-coord-rule := basic-s-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

s3-bottom-coord-rule := unary-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "3",
                   COORD-REL.PRED "_and_coord_rel" ] ].

;;; Possessives
;This snipped should add juxtaposition possessives e.g., where "dog cat"
;means something like the equivalent of "the dog's cat"

poss-phrase := head-final &
  [ SYNSEM.LOCAL.CAT [ HEAD #head & [POSS poss-or-ee],
           VAL [ SPR < >,
           COMPS < >,
           SUBJ < > ] ],
    C-CONT [ HOOK.INDEX #index,
       RELS < ! arg12-ev-relation & [ PRED "poss_rel",
             LBL #lbl,
             ARG1 #index,
             ARG2 #poss ],
       quant-relation & [ PRED "exist_q_rel",
              ARG0 #index,
              RSTR #harg ] ! >,
       HCONS < ! qeq & [ HARG #harg, LARG #lbl ] ! >,
       ICONS < ! ! > ],
    HEAD-DTR.SYNSEM.LOCAL [ CAT [ HEAD #head & [POSS poss-ee] & noun,
          VAL.SPR < [ ] > ],
          CONT.HOOK [ INDEX #index & [ COG-ST uniq+fam+act ],
          LTOP #lbl ] ],
    NON-HEAD-DTR.SYNSEM.LOCAL [ CAT [ HEAD noun & [POSS poss-or],
              VAL.SPR < > ],
        CONT.HOOK.INDEX #poss ] ].

np2-top-coord-rule :+ [ SYNSEM.LOCAL.CAT[ EC #ec, IC #ic], 
 			RCOORD-DTR.SYNSEM.LOCAL.CAT [ EC #ec, IC #ic] ,LCOORD-DTR.SYNSEM.LOCAL.CAT [ EC #ec, IC #ic] ].
np2-mid-coord-rule :+ [ SYNSEM.LOCAL.CAT [ EC #ec, IC #ic], 
 			RCOORD-DTR.SYNSEM.LOCAL.CAT [ EC #ec, IC #ic] ,LCOORD-DTR.SYNSEM.LOCAL.CAT [ EC #ec, IC #ic] ].
np2-bottom-coord-rule :+ [ SYNSEM.LOCAL.CAT [ EC #ec, IC #ic], 
 			NONCONJ-DTR.SYNSEM.LOCAL.CAT [ EC #ec, IC #ic] ].
vp2-top-coord-rule :+ [ SYNSEM.LOCAL.CAT [ EC #ec, IC #ic], 
 			RCOORD-DTR.SYNSEM.LOCAL.CAT [ EC #ec, IC #ic] ,LCOORD-DTR.SYNSEM.LOCAL.CAT [ EC #ec, IC #ic] ].
vp2-mid-coord-rule :+ [ SYNSEM.LOCAL.CAT [ EC #ec, IC #ic], 
 			RCOORD-DTR.SYNSEM.LOCAL.CAT [ EC #ec, IC #ic] ,LCOORD-DTR.SYNSEM.LOCAL.CAT [ EC #ec, IC #ic] ].
vp2-bottom-coord-rule :+ [ SYNSEM.LOCAL.CAT [ EC #ec, IC #ic], 
 			NONCONJ-DTR.SYNSEM.LOCAL.CAT [ EC #ec, IC #ic] ].
s2-top-coord-rule :+ [ SYNSEM.LOCAL.CAT [ EC #ec, IC #ic], 
 			RCOORD-DTR.SYNSEM.LOCAL.CAT [ EC #ec, IC #ic] ,LCOORD-DTR.SYNSEM.LOCAL.CAT [ EC #ec, IC #ic] ].
s2-mid-coord-rule :+ [ SYNSEM.LOCAL.CAT [ EC #ec, IC #ic], 
 			RCOORD-DTR.SYNSEM.LOCAL.CAT [ EC #ec, IC #ic] ,LCOORD-DTR.SYNSEM.LOCAL.CAT [ EC #ec, IC #ic] ].
s2-bottom-coord-rule :+ [ SYNSEM.LOCAL.CAT [ EC #ec, IC #ic], 
 			NONCONJ-DTR.SYNSEM.LOCAL.CAT [ EC #ec, IC #ic] ].
s3-top-coord-rule :+ [ SYNSEM.LOCAL.CAT [ EC #ec, IC #ic], 
 			RCOORD-DTR.SYNSEM.LOCAL.CAT [ EC #ec, IC #ic] ,LCOORD-DTR.SYNSEM.LOCAL.CAT [ EC #ec, IC #ic] ].
s3-bottom-coord-rule :+ [ SYNSEM.LOCAL.CAT [ EC #ec, IC #ic], NONCONJ-DTR.SYNSEM.LOCAL.CAT [ EC #ec, IC #ic] ].

;; WH phrasal rules

basic-head-filler-phrase :+
   [ ARGS < [ SYNSEM.LOCAL.COORD - ], [ SYNSEM.LOCAL.COORD - ] > ].

wh-ques-phrase := basic-head-filler-phrase & interrogative-clause & 
		  head-final &
   [ SYNSEM.LOCAL.CAT [ MC bool,
			VAL #val,
			HEAD verb ],
     HEAD-DTR.SYNSEM.LOCAL.CAT [ MC na,
				 VAL #val & [ SUBJ < >,
					      COMPS < > ] ],
     NON-HEAD-DTR.SYNSEM.NON-LOCAL.QUE < ! ref-ind ! > ].
			

extracted-comp-phrase := basic-extracted-comp-phrase &
  [ SYNSEM.LOCAL.CAT.HEAD verb ].

extracted-subj-phrase := basic-extracted-subj-phrase &
  [ SYNSEM.LOCAL.CAT.HEAD verb ].

